{"version":3,"sources":["jsvat.js"],"names":["jsvat","_validateRegex","vat","regex","test","_validateRules","countryName","parsedNum","exec","number","_checks","_validate","result","expect","temp","CONDITIONS","austria","multipliers","belgium","bulgaria","physical","foreigner","miscellaneous","switzerland","cyprus","czech_republic","lookup","additional","germany","denmark","estonia","greece","spain","europe","finland","france","united_kingdom","croatia","hungary","ireland","italy","latvia","lithunia","short","med","alt","luxembourg","malta","netherlands","norway","poland","portugal","romania","russia","m_1","m_2","m_3","serbia","slovenia","slovakia_republic","sweden","exports","checkVAT","toString","toUpperCase","replace","hasOwnProperty","Array","isArray","i","length","total","charAt","Math","floor","slice","check","checkNineLengthVat","j","isPhysicalPerson","month","k","substr","isForeigner","l","miscellaneousVAT","m","String","fromCharCode","product","sum","checkDigit","tempnumber","substring","no","abs","vatLength","expect2","total1","total2","digit","R","S","module"],"mappings":"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","file":"jsvat.min.js","sourcesContent":["var jsvat = (function () {\n  'use strict';\n\n  var CONDITIONS = {\n    austria: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1],\n      regex: /^(AT)U(\\d{8})$/\n    },\n    belgium: {\n      regex: /^(BE)(0?\\d{9})$/\n    },\n    bulgaria: {\n      multipliers: {\n        physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n        foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n        miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n      },\n      regex: /^(BG)(\\d{9,10})$/\n    },\n    switzerland: {\n      multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n      regex: /^(CHE)(\\d{9})(MWST)?$/\n    },\n    cyprus: {\n      regex: /^(CY)([0-59]\\d{7}[A-Z])$/\n    },\n    czech_republic: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n      regex: /^(CZ)(\\d{8,10})(\\d{3})?$/,\n      additional: [\n        /^\\d{8}$/,\n        /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n        /^6\\d{8}$/,\n        /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n      ]\n    },\n    germany: {\n      regex: /^(DE)([1-9]\\d{8})$/\n    },\n    denmark: {\n      multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n      regex: /^(DK)(\\d{8})$/\n    },\n    estonia: {\n      multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n      regex: /^(EE)(10\\d{7})$/\n    },\n    greece: {\n      multipliers: [256, 128, 64, 32, 16, 8, 4, 2],\n      regex: /^(EL)(\\d{9})$/\n    },\n    spain: {\n      multipliers: [2, 1, 2, 1, 2, 1, 2],\n      regex: [\n        /^(ES)([A-Z]\\d{8})$/,\n        /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n        /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n        /^(ES)([KLMX]\\d{7}[A-Z])$/\n      ],\n      additional: [\n        /^[A-H|J|U|V]\\d{8}$/,\n        /^[A-H|N-S|W]\\d{7}[A-J]$/,\n        /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n        /^[K|L|M|X]\\d{7}[A-Z]$/\n      ]\n    },\n    europe: {\n      regex: /^(EU)(\\d{9})$/\n    },\n    finland: {\n      multipliers: [7, 9, 10, 5, 8, 4, 2],\n      regex: /^(FI)(\\d{8})$/\n    },\n    france: {\n      regex: [\n        /^(FR)(\\d{11})$/,\n        /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n        /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n        /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n      ]\n\n    },\n    united_kingdom: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(GB)?(\\d{9})$/,\n        /^(GB)?(\\d{12})$/,\n        /^(GB)?(GD\\d{3})$/,\n        /^(GB)?(HA\\d{3})$/\n      ]\n\n    },\n    croatia: {\n      regex: /^(HR)(\\d{11})$/\n    },\n    hungary: {\n      multipliers: [9, 7, 3, 1, 9, 7, 3],\n      regex: /^(HU)(\\d{8})$/\n    },\n    ireland: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: [\n        /^(IE)(\\d{7}[A-W])$/,\n        /^(IE)([7-9][A-Z\\*\\+)]\\d{5}[A-W])$/,\n        /^(IE)(\\d{7}[A-W][AH])$/\n      ]\n\n    },\n    italy: {\n      multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n      regex: /^(IT)(\\d{11})$/\n    },\n    latvia: {\n      multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n      regex: /^(LV)(\\d{11})$/\n    },\n    lithunia: {\n      multipliers: {\n        short: [3, 4, 5, 6, 7, 8, 9, 1],\n        med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n        alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n      },\n      regex: /^(LT)(\\d{9}|\\d{12})$/\n    },\n    luxembourg: {\n      regex: /^(LU)(\\d{8})$/\n    },\n    malta: {\n      multipliers: [3, 4, 6, 7, 8, 9],\n      regex: /^(MT)([1-9]\\d{7})$/\n    },\n    netherlands: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: /^(NL)(\\d{9})B\\d{2}$/\n    },\n    norway: {\n      multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n      regex: /^(NO)(\\d{9})$/\n    },\n    poland: {\n      multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n      regex: /^(PL)(\\d{10})$/\n    },\n    portugal: {\n      multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n      regex: /^(PT)(\\d{9})$/\n    },\n    romania: {\n      multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n      regex: /^(RO)([1-9]\\d{1,9})$/\n    },\n    russia: {\n      multipliers: {\n        m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n        m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n      },\n      regex: /^(RU)(\\d{10}|\\d{12})$/\n    },\n    serbia: {\n      regex: /^(RS)(\\d{9})$/\n    },\n    slovenia: {\n      multipliers: [8, 7, 6, 5, 4, 3, 2],\n      regex: /^(SI)([1-9]\\d{7})$/\n    },\n    slovakia_republic: {\n      regex: /^(SK)([1-9]\\d[2346-9]\\d{7})$/\n    },\n    sweden: {\n      regex: /^(SE)(\\d{10}01)$/\n    }\n  };\n\n  function _validateRegex(vat, regex) {\n    return regex.test(vat);\n  }\n\n  function _validateRules(vat, regex, countryName) {\n    var parsedNum = regex.exec(vat);\n\n    //var code = parsedNum[1];\n    var number = parsedNum[2];\n    //if (!code || code.length === 0) code = 'GB';\n\n    return _checks[countryName](number, countryName);\n  }\n\n  function _validate(vat, regex, countryName) {\n    var result = false;\n    if (_validateRegex(vat, regex)) {\n      result = _validateRules(vat, regex, countryName);\n    }\n    return result;\n  }\n\n  var exports = {\n    checkVAT: function (vat) {\n      if (!vat) return false;\n      vat = vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n\n      for (var countryName in CONDITIONS) {\n        if (CONDITIONS.hasOwnProperty(countryName)) {\n          var regex = CONDITIONS[countryName].regex;\n\n          //TODO (S.Panfilov) this is not cross-browser check\n          if (Array.isArray(regex)) {\n            for (var i = 0; i < regex.length; i++) {\n              if (_validate(vat, regex[i], countryName)) return true;\n            }\n          } else {\n            if (_validate(vat, regex, countryName)) return true;\n          }\n        }\n      }\n      return false;\n\n    }\n  };\n\n  var expect;\n  var temp;\n\n  var _checks = {\n    austria: function (vat, countryName) {\n      var total = 0;\n      for (var i = 0; i < 7; i++) {\n        temp = vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      total = 10 - (total + 4) % 10;\n      if (total === 10) total = 0;\n\n      expect = +vat.slice(7, 8);\n\n      return total === expect;\n    },\n    belgium: function (vat) {\n      if (vat.length === 9) {\n        vat = '0' + vat;\n      }\n\n      if (+vat.slice(1, 2) === 0) return false;\n\n      var check = (97 - +vat.slice(0, 8) % 97);\n      expect = +vat.slice(8, 10);\n      return check === expect;\n    },\n    bulgaria: function (vat, countryName) {\n      var checkNineLengthVat = function () {\n      var total =0;\n        temp = 0;\n        for (var i = 0; i < 8; i++) {\n          temp += +vat.charAt(i) * (i + 1);\n        }\n\n        total = temp % 11;\n        if (total !== 10) {\n          expect = +vat.slice(8);\n          return total === expect;\n        }\n\n        temp = 0;\n        for (var j = 0; j < 8; j++) {\n          temp += +vat.charAt(j) * (j + 3);\n        }\n\n        total = temp % 11;\n        if (total === 10) total = 0;\n        expect = +vat.slice(8);\n\n        return total === expect;\n      };\n\n      var isPhysicalPerson = function () {\n        var total = 0;\n        // 10 digit VAT code - see if it relates to a standard physical person\n        if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n          // Check month\n          var month = +vat.slice(2, 4);\n          if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n\n            total = 0;\n            for (var k = 0; k < 9; k++) {\n              total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.physical[k];\n            }\n            // Establish check digit.\n            total = total % 11;\n            if (total === 10) total = 0;\n\n            // Check to see if the check digit given is correct, If not, try next type of person\n            if (total === +vat.substr(9, 1)) return true;\n          }\n        }\n\n        return false;\n\n      };\n\n      // It doesn't relate to a standard physical person - see if it relates to a foreigner.\n      var isForeigner = function () {\n        var total = 0;\n        // Extract the next digit and multiply by the counter.\n        for (var l = 0; l < 9; l++) {\n          total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.foreigner[l];\n        }\n\n        // Check to see if the check digit given is correct, If not, try next type of person\n        if (total % 10 === +vat.substr(9, 1)) {\n          return true;\n        }\n      };\n\n      var miscellaneousVAT = function () {\n        var total = 0;\n        // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n\n        for (var m = 0; m < 9; m++) {\n          total += +vat.charAt(m) * CONDITIONS[countryName].multipliers.miscellaneous[m];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) return false;\n        if (total === 11) total = 0;\n\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        expect = +vat.substr(9, 1);\n        return total === expect;\n      };\n\n      if (vat.length === 9) {\n        return checkNineLengthVat();\n      } else {\n        return isPhysicalPerson() || isForeigner() || miscellaneousVAT();\n      }\n\n    },\n    switzerland: function (vat, countryName) {\n      var total = 0;\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total === 10) return false;\n      if (total === 11) total = 0;\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      expect = +vat.substr(8, 1);\n      return total === expect;\n    },\n    cyprus: function (vat) {\n      var total = 0;\n      // Not allowed to start with '12'\n      if (+vat.slice(0, 2) === 12) return false;\n\n      // Extract the next digit and multiply by the counter.\n\n      for (var i = 0; i < 8; i++) {\n        var temp = +vat.charAt(i);\n        if (i % 2 === 0) {\n          switch (temp) {\n            case 0:\n              temp = 1;\n              break;\n            case 1:\n              temp = 0;\n              break;\n            case 2:\n              temp = 5;\n              break;\n            case 3:\n              temp = 7;\n              break;\n            case 4:\n              temp = 9;\n              break;\n            default:\n              temp = temp * 2 + 3;\n          }\n        }\n        total += temp;\n      }\n\n      // Establish check digit using modulus 26, and translate to char. equivalent.\n      total = total % 26;\n      total = String.fromCharCode(total + 65);\n\n      // Check to see if the check digit given is correct\n      expect = vat.substr(8, 1);\n      return total === expect;\n    },\n    czech_republic: function (vat, countryName) {\n      var total = 0;\n\n      // Legal entities\n      if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n      }\n\n      // Individuals type 2\n      else if (CONDITIONS[countryName].additional[2].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * CONDITIONS[countryName].multipliers[j];\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total === 10) total = 0;\n        if (total === 11) total = 1;\n\n        // Convert calculated check digit according to a lookup table;\n        expect = +vat.slice(8, 9);\n        return CONDITIONS[countryName].lookup[total - 1] === expect;\n      }\n\n      // Individuals type 3\n      else if (CONDITIONS[countryName].additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8);\n        expect = +vat % 11 === 0;\n        return !!(temp % 11 === 0 && expect);\n      }\n\n      // else error\n      return false;\n    },\n    germany: function (vat) {\n\n\n      // Checks the check digits of a German VAT number.\n\n      var product = 10;\n      var sum = 0;\n      var checkDigit = 0;\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement peculiar algorithm!.\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Establish check digit.\n      if (11 - product === 10) {\n        checkDigit = 0;\n      } else {\n        checkDigit = 11 - product;\n      }\n\n      // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n      // check digit.\n      expect = +vat.slice(8, 9);\n      return checkDigit === expect;\n    },\n    denmark: function (vat, countryName) {\n      var total = 0;\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      return total % 11 === 0;\n    },\n    estonia: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits using modulus 10.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    greece: function (vat, countryName) {\n      var total = 0;\n      //eight character numbers should be prefixed with an 0.\n      if (vat.length === 8) {\n        vat = '0' + vat;\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digit.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    spain: function (vat, countryName) {\n      var i = 0;\n      var total = 0;\n\n      // National juridical entities\n      if (CONDITIONS[countryName].additional[0].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Juridical entities other than national ones\n      else if (CONDITIONS[countryName].additional[1].test(vat)) {\n\n        // Extract the next digit and multiply by the counter.\n        for (i = 0; i < 7; i++) {\n          temp = vat.charAt(i + 1) * CONDITIONS[countryName].multipliers[i];\n          if (temp > 9)\n            total += Math.floor(temp / 10) + temp % 10;\n          else\n            total += temp;\n        }\n\n        // Now calculate the check digit itself.\n        total = 10 - total % 10;\n        total = String.fromCharCode(total + 64);\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // Personal number (NIF) (starting with numeric of Y or Z)\n      else if (CONDITIONS[countryName].additional[2].test(vat)) {\n        var tempnumber = vat;\n        if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1');\n        if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2');\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23);\n        return tempnumber.charAt(8) === expect;\n      }\n\n      // Personal number (NIF) (starting with K, L, M, or X)\n      else if (CONDITIONS[countryName].additional[3].test(vat)) {\n        expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n        return vat.charAt(8) === expect;\n      }\n\n      else return false;\n    },\n    europe: function () {\n      //TODO (S.Panfilov) wtf?\n      // We know little about EU numbers apart from the fact that the first 3 digits represent the\n      // country, and that there are nine digits in total.\n      return true;\n    },\n    finland: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n\n      // Establish check digit.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    france: function (vat) {\n      var total;\n      // Checks the check digits of a French VAT number.\n      if (!(/^\\d{11}$/).test(vat)) {\n        return true;\n      }\n\n      // Extract the last nine digits as an integer.\n      total = +vat.substring(2);\n\n      // Establish check digit.\n      total = (total * 100 + 12) % 97;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(0, 2);\n      return total === expect;\n    },\n    united_kingdom: function (vat, countryName) {\n      var total = 0;\n      // Government departments\n      if (vat.substr(0, 2) === 'GD') {\n        expect = 500;\n        return vat.substr(2, 3) < expect;\n      }\n\n      // Health authorities\n      if (vat.substr(0, 2) === 'HA') {\n        expect = 499;\n        return vat.substr(2, 3) > expect;\n      }\n\n      // Standard and commercial numbers\n\n\n      // 0 VAT numbers disallowed!\n      if (+vat.slice(0) === 0) return false;\n\n      // Check range is OK for modulus 97 calculation\n      var no = +vat.slice(0, 7);\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n      // VAT number could use either system, so we check it against both.\n\n      // Establish check digits by subtracting 97 from total until negative.\n      var checkDigit = total;\n      while (checkDigit > 0) {\n        checkDigit = checkDigit - 97;\n      }\n\n      // Get the absolute value and compare it with the last two characters of the VAT number. If the\n      // same, then it is a valid traditional check digit. However, even then the number must fit within\n      // certain specified ranges.\n      checkDigit = Math.abs(checkDigit);\n      if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true;\n\n      // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n      if (checkDigit >= 55)\n        checkDigit = checkDigit - 55;\n      else\n        checkDigit = checkDigit + 42;\n      expect = +vat.slice(7, 9);\n      return !!(checkDigit === expect && no > 1000000);\n    },\n    croatia: function (vat) {\n\n\n      // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n\n      for (var i = 0; i < 10; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      expect = +vat.slice(10, 11);\n      return (product + expect) % 10 === 1;\n    },\n    hungary: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(7, 8);\n      return total === expect;\n    },\n    ireland: function (vat, countryName) {\n      var total = 0;\n      // If the code is type 1 format, we need to convert it to the new before performing the validation.\n      if (/^\\d[A-Z\\*\\+]/.test(vat)) {\n        vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n      }\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // If the number is type 3 then we need to include the trailing A or H in the calculation\n      if (/^\\d{7}[A-Z][AH]$/.test(vat)) {\n        // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n        if (vat.charAt(8) === 'H') {\n          total += 72;\n        } else {\n          total += 9;\n        }\n      }\n\n      // Establish check digit using modulus 23, and translate to char. equivalent.\n      total = total % 23;\n      if (total === 0) {\n        total = 'W';\n      } else {\n        total = String.fromCharCode(total + 64);\n      }\n\n      // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(7, 8);\n      return total === expect;\n    },\n    italy: function (vat, countryName) {\n      var total = 0;\n      // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n      if (+vat.slice(0, 7) === 0) {\n        return false;\n      }\n\n      temp = +vat.slice(7, 10);\n      if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n        return false;\n      }\n\n      // Extract the next digit and multiply by the appropriate\n      for (var i = 0; i < 10; i++) {\n        temp = +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10;\n        else\n          total += temp;\n      }\n\n      // Establish check digit.\n      total = 10 - total % 10;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11);\n      return total === expect;\n    },\n    lithunia: function (vat, countryName) {\n      var total = 0;\n      // 9 character VAT numbers are for legal persons\n      if (vat.length === 9) {\n\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = 0;\n        for (var i = 0; i < 8; i++) {\n          total += +vat.charAt(i) * (i + 1);\n        }\n\n        // Can have a double check digit calculation!\n        if (total % 11 === 10) {\n          total = 0;\n          for (var j = 0; j < 8; j++) {\n            total += +vat.charAt(j) * CONDITIONS[countryName].multipliers.short[j];\n          }\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      else {\n\n        // 11th character must be one\n        if (!(/^\\d{10}1/).test(vat)) return false;\n\n        // Extract the next digit and multiply by the counter+1.\n        total = 0;\n        for (var k = 0; k < 11; k++) {\n          total += +vat.charAt(k) * CONDITIONS[countryName].multipliers.med[k];\n        }\n\n        // Can have a double check digit calculation!\n        if (total % 11 === 10) {\n          total = 0;\n          for (var l = 0; l < 11; l++) {\n            total += +vat.charAt(l) * CONDITIONS[countryName].multipliers.alt[l];\n          }\n        }\n\n        // Establish check digit.\n        total = total % 11;\n        if (total === 10) {\n          total = 0;\n        }\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(11, 12);\n        return total === expect;\n      }\n    },\n    luxembourg: function (vat) {\n      var expect = +vat.slice(6, 8);\n      var checkDigit = +vat.slice(0, 6) % 89;\n      // Checks the check digits of a Luxembourg VAT number.\n\n      return checkDigit === expect;\n    },\n    latvia: function (vat, countryName) {\n      var total = 0;\n\n      // Differentiate between legal entities and natural bodies. For the latter we simply check that\n      // the first six digits correspond to valid DDMMYY dates.\n      if ((/^[0-3]/).test(vat)) {\n        return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n      } else {\n\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n        }\n\n        // Establish check digits by getting modulus 11.\n        if (total % 11 === 4 && vat[0] === 9) total = total - 45;\n        if (total % 11 === 4)\n          total = 4 - total % 11;\n        else if (total % 11 > 4)\n          total = 14 - total % 11;\n        else if (total % 11 < 4)\n          total = 3 - total % 11;\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n      }\n    },\n    malta: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 6; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 37.\n      total = 37 - total % 37;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(6, 8);\n      return total === expect;\n    },\n    netherlands: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    norway: function (vat, countryName) {\n      var total = 0;\n      // See http://www.brreg.no/english/coordination/number.html\n\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n      total = 11 - total % 11;\n      if (total === 11) {\n        total = 0;\n      }\n      if (total < 10) {\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n      }\n    },\n    poland: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 9; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n      return total === expect;\n    },\n    portugal: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits subtracting modulus 11 from 11.\n      total = 11 - total % 11;\n      if (total > 9) {\n        total = 0;\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9);\n      return total === expect;\n    },\n    romania: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      var vatLength = vat.length;\n      var multipliers = CONDITIONS[countryName].multipliers.slice(10 - vatLength);\n\n      for (var i = 0; i < vat.length - 1; i++) {\n        total += +vat.charAt(i) * multipliers[i];\n      }\n\n      // Establish check digits by getting modulus 11.\n      total = (10 * total) % 11;\n      if (total === 10) total = 0;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(vat.length - 1, vat.length);\n      return total === expect;\n    },\n    serbia: function (vat) {\n      // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n      var product = 10;\n      var sum = 0;\n      var checkDigit;\n\n      for (var i = 0; i < 8; i++) {\n\n        // Extract the next digit and implement the algorithm\n        sum = (+vat.charAt(i) + product) % 10;\n        if (sum === 0) {\n          sum = 10;\n        }\n        product = (2 * sum) % 11;\n      }\n\n      // Now check that we have the right check digit\n      expect = 1;\n      checkDigit = (product + (+vat.slice(8, 9))) % 10;\n      return checkDigit === expect;\n    },\n    russia: function (vat, countryName) {\n      var total = 0;\n      var expect2;\n\n      // Checks the check digits of a Russian INN number\n      // See http://russianpartner.biz/test_inn.html for algorithm\n\n      // 10 digit INN numbers\n      if (vat.length === 10) {\n\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * CONDITIONS[countryName].multipliers.m_1[i];\n        }\n\n        total = total % 11;\n        if (total > 9) {\n          total = total % 10;\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        expect = +vat.slice(9, 10);\n        return total === expect;\n\n        // 12 digit INN numbers\n      } else if (vat.length === 12) {\n        var total1 = 0;\n        var total2 = 0;\n\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * CONDITIONS[countryName].multipliers.m_2[j];\n        }\n\n        total1 = total1 % 11;\n        if (total1 > 9) {\n          total1 = total1 % 10;\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * CONDITIONS[countryName].multipliers.m_3[k];\n        }\n\n        total2 = total2 % 11;\n        if (total2 > 9) {\n          total2 = total2 % 10;\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        //expect = +vat.slice(10, 11);\n        expect = (total1 === +vat.slice(10, 11));\n        //expect2 = +vat.slice(11, 12);\n        expect2 = (total2 === +vat.slice(11, 12));\n        return (expect) && (expect2);\n      }\n    },\n    sweden: function (vat) {\n      // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n      var R = 0;\n      var digit;\n      for (var i = 0; i < 9; i = i + 2) {\n        digit = +vat.charAt(i);\n        R += Math.floor(digit / 5) + ((digit * 2) % 10);\n      }\n\n      // Calculate S where S = C2 + C4 + C6 + C8\n      var S = 0;\n      for (var j = 1; j < 9; j = j + 2) {\n        S += +vat.charAt(j);\n      }\n\n      var checkDigit = (10 - (R + S) % 10) % 10;\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(9, 10);\n\n      return checkDigit === expect;\n    },\n    slovenia: function (vat, countryName) {\n      var total = 0;\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 7; i++) {\n        total += +vat.charAt(i) * CONDITIONS[countryName].multipliers[i];\n      }\n\n      // Establish check digits using modulus 11\n      total = 11 - total % 11;\n      if (total === 10) {\n        total = 0;\n      }\n\n      // Compare the number with the last character of the VAT number. If it is the\n      // same, then it's a valid check digit.\n      expect = +vat.slice(7, 8);\n      return !!(total !== 11 && total === expect);\n    },\n    slovakia_republic: function (vat) {\n      var expect = 0;\n      var checkDigit = (vat % 11);\n      // Checks the check digits of a Slovakian VAT number.\n      // Check that the modulus of the whole VAT number is 0 - else error\n      return checkDigit === expect;\n    }\n  };\n\n  if (typeof module === 'object' && module.exports) module.exports = exports;\n\n  return exports;\n})();"],"sourceRoot":"/source/"}