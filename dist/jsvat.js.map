{"version":3,"sources":["webpack://jsvat/webpack/universalModuleDefinition","webpack://jsvat/webpack/bootstrap","webpack://jsvat/./src/countries/austria.ts","webpack://jsvat/./src/countries/belgium.ts","webpack://jsvat/./src/countries/bulgaria.ts","webpack://jsvat/./src/countries/croatiat.ts","webpack://jsvat/./src/countries/cyprus.ts","webpack://jsvat/./src/countries/czech_republic.ts","webpack://jsvat/./src/countries/denmark.ts","webpack://jsvat/./src/countries/estonia.ts","webpack://jsvat/./src/countries/europe.ts","webpack://jsvat/./src/countries/finland.ts","webpack://jsvat/./src/countries/france.ts","webpack://jsvat/./src/countries/germany.ts","webpack://jsvat/./src/countries/greece.ts","webpack://jsvat/./src/countries/hungary.ts","webpack://jsvat/./src/countries/ireland.ts","webpack://jsvat/./src/countries/italy.ts","webpack://jsvat/./src/countries/latvia.ts","webpack://jsvat/./src/countries/lithuania.ts","webpack://jsvat/./src/countries/luxembourg.ts","webpack://jsvat/./src/countries/malta.ts","webpack://jsvat/./src/countries/netherlands.ts","webpack://jsvat/./src/countries/norway.ts","webpack://jsvat/./src/countries/poland.ts","webpack://jsvat/./src/countries/portugal.ts","webpack://jsvat/./src/countries/romania.ts","webpack://jsvat/./src/countries/russia.ts","webpack://jsvat/./src/countries/serbia.ts","webpack://jsvat/./src/countries/slovakia_republic.ts","webpack://jsvat/./src/countries/slovenia.ts","webpack://jsvat/./src/countries/spain.ts","webpack://jsvat/./src/countries/sweden.ts","webpack://jsvat/./src/countries/switzerland.ts","webpack://jsvat/./src/countries/united_kingdom.ts","webpack://jsvat/./src/main.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,4BAA4B,EAAE;AAC9B;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA,8BAA8B,QAAQ;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,KAAK;AAC/B;AACA;;;;;;;;;;;;;ACjGA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,GAAG;AAC7B;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gCAAgC,EAAE;AAClC;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,0BAA0B,KAAK,KAAK,EAAE;AACtC;AACA,iBAAiB,EAAE;AACnB,6CAA6C,EAAE;AAC/C,kBAAkB,EAAE;AACpB,iBAAiB,EAAE,qBAAqB,EAAE;AAC1C;AACA;AACA;;;;;;;;;;;;;AChGA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,4BAA4B,EAAE;AAC9B;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,sBAAsB,GAAG;AACzB,iCAAiC,GAAG;AACpC,mCAAmC,EAAE;AACrC,+BAA+B,EAAE,GAAG,EAAE;AACtC;AACA;AACA;;;;;;;;;;;;;ACzBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,+BAA+B,EAAE;AACjC;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,wBAAwB,EAAE;AAC1B,SAAS;AACT;AACA,sBAAsB,EAAE;AACxB,mCAAmC,EAAE;AACrC,sBAAsB,EAAE;AACxB;AACA;AACA;;;;;;;;;;;;;ACtDA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;;;;;;;;;;;;;ACzCA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,oBAAoB,GAAG;AACvB,0BAA0B,EAAE,IAAI,GAAG;AACnC;AACA;;;;;;;;;;;;;AC3GA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,EAAE,KAAK,EAAE;AACnC;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,GAAG;AAC7B;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;AC3BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,IAAI;AACnC;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,GAAG,IAAI,GAAG;AACpC;AACA;;;;;;;;;;;;;ACjEA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,EAAE;AAC5B;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,yCAAyC,EAAE;AAC3C;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,+BAA+B,EAAE;AACjC,6BAA6B,EAAE;AAC/B,4BAA4B,EAAE;AAC9B;AACA;AACA,4BAA4B,EAAE;AAC9B,4BAA4B,EAAE;AAC9B,0BAA0B,EAAE;AAC5B,0BAA0B,EAAE;AAC5B;AACA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,0BAA0B,GAAG;AAC7B;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,GAAG;AAC1B,yBAAyB,EAAE;AAC3B,yBAAyB,EAAE;AAC3B;AACA;AACA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8C;AACA;AACE;AACD;AACH;AAC5C;AAC4D;AACd;AACA;AACF;AACE;AACF;AACE;AACF;AACE;AACA;AACJ;AACE;AACM;AACE;AACV;AACY;AACV;AACA;AACI;AACF;AACF;AACA;AAC5C;AACkE;AAClB;AACN;AACE;AACU;AACtD;AAC4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,oBAAoB;AACpB;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP,IAAI,mEAAO;AACX,IAAI,mEAAO;AACX,IAAI,sEAAQ;AACZ,IAAI,oEAAO;AACX,IAAI,gEAAM;AACV,IAAI,wFAAc;AAClB,IAAI,mEAAO;AACX,IAAI,mEAAO;AACX,IAAI,gEAAM;AACV,IAAI,mEAAO;AACX,IAAI,iEAAM;AACV,IAAI,oEAAO;AACX,IAAI,iEAAM;AACV,IAAI,oEAAO;AACX,IAAI,oEAAO;AACX,IAAI,8DAAK;AACT,IAAI,iEAAM;AACV,IAAI,0EAAS;AACb,IAAI,6EAAU;AACd,IAAI,8DAAK;AACT,IAAI,gFAAW;AACf,IAAI,iEAAM;AACV,IAAI,iEAAM;AACV,IAAI,uEAAQ;AACZ,IAAI,oEAAO;AACX,IAAI,iEAAM;AACV,IAAI,iEAAM;AACV,IAAI,kGAAiB;AACrB,IAAI,uEAAQ;AACZ,IAAI,8DAAK;AACT,IAAI,iEAAM;AACV,IAAI,gFAAW;AACf,IAAI,yFAAc;AAClB;AACO,oEAAoE;AAC3E;AACA;AACA;AACA;AACA,0CAA0C,8BAA8B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"jsvat.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsvat\"] = factory();\n\telse\n\t\troot[\"jsvat\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.ts\");\n","export const austria = {\n    name: 'Austria',\n    codes: ['AT', 'AUT', '040'],\n    calcFn: function (vat) {\n        let total = 0;\n        for (let i = 0; i < 7; i++) {\n            if (!this.rules.multipliers)\n                return false;\n            if (!Array.isArray(this.rules.multipliers))\n                return false;\n            let temp = Number(vat.charAt(i)) * this.rules.multipliers[i];\n            if (temp > 9) {\n                total += Math.floor(temp / 10) + temp % 10;\n            }\n            else {\n                total += temp;\n            }\n        }\n        total = 10 - (total + 4) % 10;\n        if (total === 10)\n            total = 0;\n        return total === +vat.slice(7, 8);\n    },\n    rules: {\n        multipliers: [1, 2, 1, 2, 1, 2, 1],\n        regex: [/^(AT)U(\\d{8})$/]\n    }\n};\n","export const belgium = {\n    name: 'Belgium',\n    codes: ['BE', 'BEL', '056'],\n    calcFn: function (vat) {\n        if (vat.length === 9) {\n            vat = '0' + vat;\n        }\n        if (+vat.slice(1, 2) === 0)\n            return false;\n        const check = (97 - Number(vat.slice(0, 8)) % 97);\n        return check === Number(vat.slice(8, 10));\n    },\n    rules: {\n        regex: [/^(BE)(0?\\d{9})$/]\n    }\n};\n","export const bulgaria = {\n    name: 'Bulgaria',\n    codes: ['BG', 'BGR', '100'],\n    calcFn: function (vat) {\n        function _increase(value, vat, from, to, incr) {\n            for (let i = from; i < to; i++) {\n                value += Number(vat.charAt(i)) * (i + incr);\n            }\n            return value;\n        }\n        function _increase2(value, vat, from, to, multipliers) {\n            for (let i = from; i < to; i++) {\n                if (Array.isArray(multipliers)) {\n                    value += Number(vat.charAt(i)) * multipliers[i];\n                }\n            }\n            return value;\n        }\n        function _checkNineLengthVat(vat) {\n            let total;\n            let temp = 0;\n            const expect = +vat.slice(8);\n            temp = _increase(temp, vat, 0, 8, 1);\n            total = temp % 11;\n            if (total !== 10) {\n                return total === expect;\n            }\n            temp = _increase(0, vat, 0, 8, 3);\n            total = temp % 11;\n            if (total === 10)\n                total = 0;\n            return total === expect;\n        }\n        function _isPhysicalPerson(vat, rules) {\n            // 10 digit VAT code - see if it relates to a standard physical person\n            if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n                // Check month\n                const month = +vat.slice(2, 4);\n                if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n                    if (!rules.multipliers)\n                        return false;\n                    if (Array.isArray(rules.multipliers))\n                        return false;\n                    let total = _increase2(0, vat, 0, 9, rules.multipliers.physical);\n                    // Establish check digit.\n                    total = total % 11;\n                    if (total === 10)\n                        total = 0;\n                    // Check to see if the check digit given is correct, If not, try next type of person\n                    if (total === +vat.substr(9, 1))\n                        return true;\n                }\n            }\n            return false;\n        }\n        function _isForeigner(vat, rules) {\n            if (!rules.multipliers)\n                return false;\n            if (Array.isArray(rules.multipliers))\n                return false;\n            // Extract the next digit and multiply by the counter.\n            const total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner);\n            // Check to see if the check digit given is correct, If not, try next type of person\n            return total % 10 === +vat.substr(9, 1);\n        }\n        function _miscellaneousVAT(vat, rules) {\n            if (!rules.multipliers)\n                return false;\n            if (Array.isArray(rules.multipliers))\n                return false;\n            // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n            let total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous);\n            // Establish check digit.\n            total = 11 - total % 11;\n            if (total === 10)\n                return false;\n            if (total === 11)\n                total = 0;\n            // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n            const expect = Number(vat.substr(9, 1));\n            return total === expect;\n        }\n        if (vat.length === 9) {\n            return _checkNineLengthVat(vat);\n        }\n        else {\n            return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules);\n        }\n    },\n    rules: {\n        multipliers: {\n            physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n            foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n            miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n        },\n        regex: [/^(BG)(\\d{9,10})$/]\n    }\n};\n","export const croatia = {\n    name: 'Croatia',\n    codes: ['HR', 'HRV', '191'],\n    calcFn: function (vat) {\n        let expect;\n        // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n        let product = 10;\n        let sum = 0;\n        for (let i = 0; i < 10; i++) {\n            // Extract the next digit and implement the algorithm\n            sum = (+vat.charAt(i) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Now check that we have the right check digit\n        expect = Number(vat.slice(10, 11));\n        return (product + expect) % 10 === 1;\n    },\n    rules: {\n        regex: [/^(HR)(\\d{11})$/]\n    }\n};\n","export const cyprus = {\n    name: 'Cyprus',\n    codes: ['CY', 'CYP', '196'],\n    calcFn: function (vat) {\n        let total = 0;\n        let expect;\n        // Not allowed to start with '12'\n        if (Number(vat.slice(0, 2)) === 12)\n            return false;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            let temp = Number(vat.charAt(i));\n            if (i % 2 === 0) {\n                switch (temp) {\n                    case 0:\n                        temp = 1;\n                        break;\n                    case 1:\n                        temp = 0;\n                        break;\n                    case 2:\n                        temp = 5;\n                        break;\n                    case 3:\n                        temp = 7;\n                        break;\n                    case 4:\n                        temp = 9;\n                        break;\n                    default:\n                        temp = temp * 2 + 3;\n                }\n            }\n            total += temp;\n        }\n        // Establish check digit using modulus 26, and translate to char. equivalent.\n        total = total % 26;\n        total = Number(String.fromCharCode(total + 65));\n        // Check to see if the check digit given is correct\n        expect = Number(vat.substr(8, 1));\n        return total === expect;\n    },\n    rules: {\n        regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n    }\n};\n","export const czech_republic = {\n    name: 'Czech Republic',\n    codes: ['CZ', 'CZE', '203'],\n    calcFn: function (vat) {\n        function _isLegalEntities(vat, rules) {\n            if (!rules.additional)\n                return false;\n            let total = 0;\n            if (rules.additional[0].test(vat)) {\n                if (!rules.multipliers)\n                    return false;\n                if (!Array.isArray(rules.multipliers))\n                    return false;\n                // Extract the next digit and multiply by the counter.\n                for (let i = 0; i < 7; i++) {\n                    total += Number(vat.charAt(i)) * rules.multipliers[i];\n                }\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10)\n                    total = 0;\n                if (total === 11)\n                    total = 1;\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                const expect = +vat.slice(7, 8);\n                return total === expect;\n            }\n            return false;\n        }\n        function _isIndividualType1(vat, rules) {\n            if (!rules.additional)\n                return false;\n            if (rules.additional[1].test(vat)) {\n                const temp = Number(vat.slice(0, 2));\n                return temp <= 62;\n            }\n            return false;\n        }\n        function _isIndividualType2(vat, rules) {\n            if (!rules.additional)\n                return false;\n            let total = 0;\n            if (rules.additional[2].test(vat)) {\n                if (!rules.multipliers)\n                    return false;\n                if (!Array.isArray(rules.multipliers))\n                    return false;\n                // Extract the next digit and multiply by the counter.\n                for (let j = 0; j < 7; j++) {\n                    total += +vat.charAt(j + 1) * rules.multipliers[j];\n                }\n                // Establish check digit.\n                total = 11 - total % 11;\n                if (total === 10)\n                    total = 0;\n                if (total === 11)\n                    total = 1;\n                // Convert calculated check digit according to a lookup table\n                let expect = +vat.slice(8, 9);\n                if (!rules.lookup)\n                    return false;\n                return rules.lookup[total - 1] === expect;\n            }\n            return false;\n        }\n        function _isIndividualType3(vat, rules) {\n            if (!rules.additional)\n                return false;\n            if (rules.additional[3].test(vat)) {\n                const temp = Number(vat.slice(0, 2)) + Number(vat.slice(2, 4)) + Number(vat.slice(4, 6)) + Number(vat.slice(6, 8)) + Number(vat.slice(8));\n                const expect = Number(vat) % 11 === 0;\n                return !!(temp % 11 === 0 && expect);\n            }\n            return false;\n        }\n        if (_isLegalEntities(vat, this.rules))\n            return true;\n        if (_isIndividualType2(vat, this.rules))\n            return true;\n        if (_isIndividualType3(vat, this.rules))\n            return true;\n        if (_isIndividualType1(vat, this.rules))\n            return true;\n        return false;\n    },\n    rules: {\n        multipliers: [8, 7, 6, 5, 4, 3, 2],\n        lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n        regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n        additional: [\n            /^\\d{8}$/,\n            /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n            /^6\\d{8}$/,\n            /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n        ]\n    }\n};\n","export const denmark = {\n    name: 'Denmark',\n    codes: ['DK', 'DNK', '208'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        for (let i = 0; i < 8; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        return total % 11 === 0;\n    },\n    rules: {\n        multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n        regex: [/^(DK)(\\d{8})$/]\n    }\n};\n","export const estonia = {\n    name: 'Estonia',\n    codes: ['EE', 'EST', '233'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        // Establish check digits using modulus 10.\n        total = 10 - total % 10;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n        regex: [/^(EE)(10\\d{7})$/]\n    }\n};\n","export const europe = {\n    name: 'Europe',\n    codes: ['EU', 'EUR', '000'],\n    calcFn: function () {\n        // We know little about EU numbers apart from the fact that the first 3 digits represent the\n        // country, and that there are nine digits in total.\n        return true;\n    },\n    rules: {\n        regex: [/^(EU)(\\d{9})$/]\n    }\n};\n","export const finland = {\n    name: 'Finland',\n    codes: ['FI', 'FIN', '246'],\n    calcFn: function (vat) {\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        for (let i = 0; i < 7; i++)\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        // Establish check digit.\n        total = 11 - total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(7, 8));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [7, 9, 10, 5, 8, 4, 2],\n        regex: [/^(FI)(\\d{8})$/]\n    }\n};\n","export const france = {\n    name: 'France',\n    codes: ['FR', 'FRA', '250'],\n    calcFn: function (vat) {\n        let total;\n        let expect;\n        // Checks the check digits of a French VAT number.\n        if (!(/^\\d{11}$/).test(vat))\n            return true;\n        // Extract the last nine digits as an integer.\n        total = +vat.substring(2);\n        // Establish check digit.\n        total = (total * 100 + 12) % 97;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(0, 2);\n        return total === expect;\n    },\n    rules: {\n        regex: [\n            /^(FR)(\\d{11})$/,\n            /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n            /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n            /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n        ]\n    }\n};\n","export const germany = {\n    name: 'Germany',\n    codes: ['DE', 'DEU', '276'],\n    calcFn: function (vat) {\n        // Checks the check digits of a German VAT number.\n        let product = 10;\n        let sum = 0;\n        let checkDigit = 0;\n        let expect;\n        for (let i = 0; i < 8; i++) {\n            // Extract the next digit and implement peculiar algorithm!.\n            sum = (+vat.charAt(i) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Establish check digit.\n        if (11 - product === 10) {\n            checkDigit = 0;\n        }\n        else {\n            checkDigit = 11 - product;\n        }\n        // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n        // check digit.\n        expect = +vat.slice(8, 9);\n        return checkDigit === expect;\n    },\n    rules: {\n        regex: [/^(DE)([1-9]\\d{8})$/]\n    }\n};\n","export const greece = {\n    name: 'Greece',\n    codes: ['GR', 'GRC', '300'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // eight character numbers should be prefixed with an 0.\n        if (vat.length === 8) {\n            vat = '0' + vat;\n        }\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Establish check digit.\n        total = total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(8, 9));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [\n            256,\n            128,\n            64,\n            32,\n            16,\n            8,\n            4,\n            2\n        ],\n        regex: [/^(EL)(\\d{9})$/]\n    }\n};\n","export const hungary = {\n    name: 'Hungary',\n    codes: ['HU', 'HUN', '348'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(7, 8);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [\n            9,\n            7,\n            3,\n            1,\n            9,\n            7,\n            3\n        ],\n        regex: [/^(HU)(\\d{8})$/]\n    }\n};\n","export const ireland = {\n    name: 'Ireland',\n    codes: ['IE', 'IRL', '372'],\n    calcFn: function (vat) {\n        if (!this.rules.typeFormats || !this.rules.typeFormats.first)\n            return false;\n        if (!this.rules.multipliers)\n            return false;\n        let total = 0;\n        let expect;\n        // If the code is type 1 format, we need to convert it to the new before performing the validation.\n        if (this.rules.typeFormats.first.test(vat)) {\n            vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8);\n        }\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // If the number is type 3 then we need to include the trailing A or H in the calculation\n        if (this.rules.typeFormats.third.test(vat)) {\n            // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n            if (vat.charAt(8) === 'H') {\n                total += 72;\n            }\n            else {\n                total += 9;\n            }\n        }\n        // Establish check digit using modulus 23, and translate to char. equivalent.\n        total = total % 23;\n        if (total === 0) {\n            total = 'W';\n        }\n        else {\n            total = String.fromCharCode(total + 64);\n        }\n        // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n        expect = vat.slice(7, 8);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [8, 7, 6, 5, 4, 3, 2],\n        typeFormats: {\n            first: /^\\d[A-Z*+]/,\n            third: /^\\d{7}[A-Z][AH]$/\n        },\n        regex: [\n            /^(IE)(\\d{7}[A-W])$/,\n            /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n            /^(IE)(\\d{7}[A-W][AH])$/\n        ]\n    }\n};\n","export const italy = {\n    name: 'Italy',\n    codes: ['IT', 'ITA', '380'],\n    calcFn: function (vat) {\n        let total = 0;\n        let temp;\n        let expect;\n        // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n        if (Number(vat.slice(0, 7)) === 0) {\n            return false;\n        }\n        temp = Number(vat.slice(7, 10));\n        if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n            return false;\n        }\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        // Extract the next digit and multiply by the appropriate\n        for (let i = 0; i < 10; i++) {\n            temp = Number(vat.charAt(i)) * this.rules.multipliers[i];\n            if (temp > 9)\n                total += Math.floor(temp / 10) + temp % 10;\n            else\n                total += temp;\n        }\n        // Establish check digit.\n        total = 10 - total % 10;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(10, 11);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n        regex: [/^(IT)(\\d{11})$/]\n    }\n};\n","export const latvia = {\n    name: 'Latvia',\n    codes: ['LV', 'LVA', '428'],\n    calcFn: function (vat) {\n        let total = 0;\n        let expect;\n        // Differentiate between legal entities and natural bodies. For the latter we simply check that\n        // the first six digits correspond to valid DDMMYY dates.\n        if ((/^[0-3]/).test(vat)) {\n            return !!(/^[0-3][0-9][0-1][0-9]/).test(vat);\n        }\n        else {\n            if (!this.rules.multipliers)\n                return false;\n            if (!Array.isArray(this.rules.multipliers))\n                return false;\n            // Extract the next digit and multiply by the counter.\n            for (let i = 0; i < 10; i++) {\n                total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n            }\n            // Establish check digits by getting modulus 11.\n            if (total % 11 === 4 && Number(vat[0]) === 9)\n                total = total - 45;\n            if (total % 11 === 4) {\n                total = 4 - total % 11;\n            }\n            else if (total % 11 > 4) {\n                total = 14 - total % 11;\n            }\n            else if (total % 11 < 4) {\n                total = 3 - total % 11;\n            }\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(10, 11);\n            return total === expect;\n        }\n    },\n    rules: {\n        multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n        regex: [/^(LV)(\\d{11})$/]\n    }\n};\n","export const lithuania = {\n    name: 'Lithuania',\n    codes: ['LT', 'LTU', '440'],\n    calcFn: function (vat) {\n        function _extractDigit(vat, multiplierList, key) {\n            return Number(vat.charAt(key)) * multiplierList[key];\n        }\n        function _doubleCheckCalculation(vat, total, rules) {\n            if (total % 11 === 10) {\n                total = 0;\n                if (rules.multipliers && !Array.isArray(rules.multipliers)) {\n                    for (let i = 0; i < 8; i++) {\n                        total += _extractDigit(vat, rules.multipliers.short, i);\n                    }\n                }\n            }\n            return total;\n        }\n        function extractDigit(vat, total) {\n            for (let i = 0; i < 8; i++) {\n                total += Number(vat.charAt(i)) * (i + 1);\n            }\n            return total;\n        }\n        function checkDigit(total) {\n            total = total % 11;\n            if (total === 10) {\n                total = 0;\n            }\n            return total;\n        }\n        function _check9DigitVat(vat, rules) {\n            // 9 character VAT numbers are for legal persons\n            let total = 0;\n            if (vat.length === 9) {\n                // 8th character must be one\n                if (!(/^\\d{7}1/).test(vat))\n                    return false;\n                // Extract the next digit and multiply by the counter+1.\n                total = extractDigit(vat, total);\n                // Can have a double check digit calculation!\n                total = _doubleCheckCalculation(vat, total, rules);\n                // Establish check digit.\n                total = checkDigit(total);\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                const expect = Number(vat.slice(8, 9));\n                return total === expect;\n            }\n            return false;\n        }\n        function extractDigit12(vat, total, rules) {\n            if (rules.multipliers) {\n                if (!Array.isArray(rules.multipliers)) {\n                    for (let k = 0; k < 11; k++) {\n                        total += _extractDigit(vat, rules.multipliers.med, k);\n                    }\n                }\n            }\n            return total;\n        }\n        function _doubleCheckCalculation12(vat, total, rules) {\n            if (rules.multipliers) {\n                if (!Array.isArray(rules.multipliers)) {\n                    if (total % 11 === 10) {\n                        total = 0;\n                        for (let l = 0; l < 11; l++) {\n                            total += _extractDigit(vat, rules.multipliers.alt, l);\n                        }\n                    }\n                }\n            }\n            return total;\n        }\n        function _check12DigitVat(vat, rules) {\n            let total = 0;\n            if (Array.isArray(rules.multipliers))\n                return false;\n            // 12 character VAT numbers are for temporarily registered taxpayers\n            if (vat.length === 12) {\n                if (!rules.check)\n                    return false;\n                // 11th character must be one\n                if (!(rules.check).test(vat))\n                    return false;\n                // Extract the next digit and multiply by the counter+1.\n                total = extractDigit12(vat, total, rules);\n                // Can have a double check digit calculation!\n                total = _doubleCheckCalculation12(vat, total, rules);\n                // Establish check digit.\n                total = checkDigit(total);\n                // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n                var expect = +vat.slice(11, 12);\n                return total === expect;\n            }\n            return false;\n        }\n        return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules);\n    },\n    rules: {\n        multipliers: {\n            short: [3, 4, 5, 6, 7, 8, 9, 1],\n            med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n            alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n        },\n        check: /^\\d{10}1/,\n        regex: [/^(LT)(\\d{9}|\\d{12})$/]\n    }\n};\n","export const luxembourg = {\n    name: 'Luxembourg',\n    codes: ['LU', 'LUX', '442'],\n    calcFn: function (vat) {\n        const expect = Number(vat.slice(6, 8));\n        const checkDigit = Number(vat.slice(0, 6)) % 89;\n        // Checks the check digits of a Luxembourg VAT number.\n        return checkDigit === expect;\n    },\n    rules: {\n        regex: [/^(LU)(\\d{8})$/]\n    }\n};\n","export const malta = {\n    name: 'Malta',\n    codes: ['MT', 'MLT', '470'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 6; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        // Establish check digits by getting modulus 37.\n        total = 37 - total % 37;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(6, 8));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [3, 4, 6, 7, 8, 9],\n        regex: [/^(MT)([1-9]\\d{7})$/]\n    }\n};\n","export const netherlands = {\n    name: 'Netherlands',\n    codes: ['NL', 'NLD', '528'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Establish check digits by getting modulus 11.\n        total = total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +Number(vat.slice(8, 9));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n        regex: [/^(NL)(\\d{9})B\\d{2}$/]\n    }\n};\n","export const norway = {\n    name: 'Norway',\n    codes: ['NO', 'NOR', '578'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // See http://www.brreg.no/english/coordination/number.html\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n        total = 11 - total % 11;\n        if (total === 11) {\n            total = 0;\n        }\n        if (total < 10) {\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        }\n        return false;\n    },\n    rules: {\n        multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n        regex: [/^(NO)(\\d{9})$/]\n    }\n};\n","export const poland = {\n    name: 'Poland',\n    codes: ['PL', 'POL', '616'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 9; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        // Establish check digits subtracting modulus 11 from 11.\n        total = total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(9, 10);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n        regex: [/^(PL)(\\d{10})$/]\n    }\n};\n","export const portugal = {\n    name: 'Portugal',\n    codes: ['PT', 'PRT', '620'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        let total = 0;\n        let expect;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 8; i++) {\n            total += +vat.charAt(i) * this.rules.multipliers[i];\n        }\n        // Establish check digits subtracting modulus 11 from 11.\n        total = 11 - total % 11;\n        if (total > 9) {\n            total = 0;\n        }\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = +vat.slice(8, 9);\n        return total === expect;\n    },\n    rules: {\n        multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n        regex: [/^(PT)(\\d{9})$/]\n    }\n};\n","export const romania = {\n    name: 'Romania',\n    codes: ['RO', 'ROU', '642'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers || !Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        const vatLength = vat.length;\n        const multipliers = this.rules.multipliers.slice(10 - vatLength);\n        for (let i = 0; i < vat.length - 1; i++) {\n            total += Number(vat.charAt(i)) * multipliers[i];\n        }\n        // Establish check digits by getting modulus 11.\n        total = (10 * total) % 11;\n        if (total === 10)\n            total = 0;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(vat.length - 1, vat.length));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n        regex: [/^(RO)([1-9]\\d{1,9})$/]\n    }\n};\n","export const russia = {\n    name: 'Russian Federation',\n    codes: ['RU', 'RUS', '643'],\n    calcFn: function (vat) {\n        function _check10DigitINN(vat, rules) {\n            let total = 0;\n            if (vat.length === 10) {\n                if (!rules.multipliers)\n                    return false;\n                if (Array.isArray(rules.multipliers))\n                    return false;\n                for (let i = 0; i < 10; i++) {\n                    total += +vat.charAt(i) * rules.multipliers.m_1[i];\n                }\n                total = total % 11;\n                if (total > 9) {\n                    total = total % 10;\n                }\n                // Compare it with the last character of the VAT number. If it is the same, then it's valid\n                const expect = +vat.slice(9, 10);\n                return total === expect;\n            }\n            return false;\n        }\n        function _check12DigitINN(vat, rules) {\n            let total1 = 0;\n            let total2 = 0;\n            if (vat.length === 12) {\n                if (!rules.multipliers)\n                    return false;\n                if (Array.isArray(rules.multipliers))\n                    return false;\n                for (let j = 0; j < 11; j++) {\n                    total1 += +vat.charAt(j) * rules.multipliers.m_2[j];\n                }\n                total1 = total1 % 11;\n                if (total1 > 9) {\n                    total1 = total1 % 10;\n                }\n                for (let k = 0; k < 11; k++) {\n                    total2 += +vat.charAt(k) * rules.multipliers.m_3[k];\n                }\n                total2 = total2 % 11;\n                if (total2 > 9) {\n                    total2 = total2 % 10;\n                }\n                // Compare the first check with the 11th character and the second check with the 12th and last\n                // character of the VAT number. If they're both the same, then it's valid\n                const expect = (total1 === +vat.slice(10, 11));\n                const expect2 = (total2 === +vat.slice(11, 12));\n                return (expect) && (expect2);\n            }\n            return false;\n        }\n        // See http://russianpartner.biz/test_inn.html for algorithm\n        return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules);\n    },\n    rules: {\n        multipliers: {\n            m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n            m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n        },\n        regex: [/^(RU)(\\d{10}|\\d{12})$/]\n    }\n};\n","export const serbia = {\n    name: 'Serbia',\n    codes: ['RS', 'SRB', '688'],\n    calcFn: function (vat) {\n        // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n        let product = 10;\n        let sum = 0;\n        for (let i = 0; i < 8; i++) {\n            // Extract the next digit and implement the algorithm\n            sum = (+vat.charAt(i) + product) % 10;\n            if (sum === 0) {\n                sum = 10;\n            }\n            product = (2 * sum) % 11;\n        }\n        // Now check that we have the right check digit\n        const expect = 1;\n        const checkDigit = (product + (+vat.slice(8, 9))) % 10;\n        return checkDigit === expect;\n    },\n    rules: {\n        regex: [/^(RS)(\\d{9})$/]\n    }\n};\n","// eslint-disable-next-line camelcase\nexport const slovakia_republic = {\n    name: 'Slovakia_Republic',\n    codes: ['SK', 'SVK', '703'],\n    calcFn: function (vat) {\n        const expect = 0;\n        const checkDigit = (Number(vat) % 11);\n        return checkDigit === expect;\n    },\n    rules: {\n        regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n    }\n};\n","export const slovenia = {\n    name: 'Slovenia',\n    codes: ['SI', 'SVN', '705'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        let expect;\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Establish check digits using modulus 11\n        total = 11 - total % 11;\n        if (total === 10) {\n            total = 0;\n        }\n        // Compare the number with the last character of the VAT number. If it is the\n        // same, then it's a valid check digit.\n        expect = +vat.slice(7, 8);\n        return !!(total !== 11 && total === expect);\n    },\n    rules: {\n        multipliers: [8, 7, 6, 5, 4, 3, 2],\n        regex: [/^(SI)([1-9]\\d{7})$/]\n    }\n};\n","export const spain = {\n    name: 'Spain',\n    codes: ['ES', 'ESP', '724'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!this.rules.additional)\n            return false;\n        let i = 0;\n        let total = 0;\n        let temp;\n        let expect;\n        // National juridical entities\n        if (this.rules.additional[0].test(vat)) {\n            if (!Array.isArray(this.rules.multipliers))\n                return false;\n            // Extract the next digit and multiply by the counter.\n            for (i = 0; i < 7; i++) {\n                temp = Number(vat.charAt(i + 1)) * this.rules.multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n            // Now calculate the check digit itself.\n            total = 10 - total % 10;\n            if (total === 10) {\n                total = 0;\n            }\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = +vat.slice(8, 9);\n            return total === expect;\n        }\n        else if (this.rules.additional[1].test(vat)) { // Juridical entities other than national ones\n            if (!Array.isArray(this.rules.multipliers))\n                return false;\n            // Extract the next digit and multiply by the counter.\n            for (i = 0; i < 7; i++) {\n                temp = Number(vat.charAt(i + 1)) * this.rules.multipliers[i];\n                if (temp > 9)\n                    total += Math.floor(temp / 10) + temp % 10;\n                else\n                    total += temp;\n            }\n            // Now calculate the check digit itself.\n            total = 10 - total % 10;\n            total = Number(String.fromCharCode(total + 64));\n            // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n            expect = Number(vat.slice(8, 9));\n            return total === expect;\n        }\n        else if (this.rules.additional[2].test(vat)) { // Personal number (NIF) (starting with numeric of Y or Z)\n            let tempNumber = vat;\n            if (tempNumber.substring(0, 1) === 'Y')\n                tempNumber = tempNumber.replace(/Y/, '1');\n            if (tempNumber.substring(0, 1) === 'Z')\n                tempNumber = tempNumber.replace(/Z/, '2');\n            expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempNumber.substring(0, 8) % 23);\n            return tempNumber.charAt(8) === expect;\n        }\n        else if (this.rules.additional[3].test(vat)) { // Personal number (NIF) (starting with K, L, M, or X)\n            expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23);\n            return vat.charAt(8) === expect;\n        }\n        else\n            return false;\n    },\n    rules: {\n        multipliers: [2, 1, 2, 1, 2, 1, 2],\n        regex: [\n            /^(ES)([A-Z]\\d{8})$/,\n            /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n            /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n            /^(ES)([KLMX]\\d{7}[A-Z])$/\n        ],\n        additional: [\n            /^[A-H|J|U|V]\\d{8}$/,\n            /^[A-H|N-S|W]\\d{7}[A-J]$/,\n            /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n            /^[K|L|M|X]\\d{7}[A-Z]$/\n        ]\n    }\n};\n","export const sweden = {\n    name: 'Sweden',\n    codes: ['SE', 'SWE', '752'],\n    calcFn: function (vat) {\n        let expect;\n        // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n        let R = 0;\n        for (let i = 0; i < 9; i = i + 2) {\n            const digit = +vat.charAt(i);\n            R += Math.floor(digit / 5) + ((digit * 2) % 10);\n        }\n        // Calculate S where S = C2 + C4 + C6 + C8\n        let S = 0;\n        for (var j = 1; j < 9; j = j + 2) {\n            S += +vat.charAt(j);\n        }\n        const checkDigit = (10 - (R + S) % 10) % 10;\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        expect = Number(vat.slice(9, 10));\n        return checkDigit === expect;\n    },\n    rules: {\n        regex: [/^(SE)(\\d{10}01)$/]\n    }\n};\n","export const switzerland = {\n    name: 'Switzerland',\n    codes: ['CH', 'CHE', '756'],\n    calcFn: function (vat) {\n        if (!this.rules.multipliers)\n            return false;\n        if (!Array.isArray(this.rules.multipliers))\n            return false;\n        let total = 0;\n        for (let i = 0; i < 8; i++) {\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Establish check digit.s\n        total = 11 - total % 11;\n        if (total === 10)\n            return false;\n        if (total === 11)\n            total = 0;\n        // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n        const expect = Number(vat.substr(8, 1));\n        return total === expect;\n    },\n    rules: {\n        multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n        regex: [/^(CHE)(\\d{9})(MWST)?$/]\n    }\n};\n","// eslint-disable-next-line camelcase\nexport const united_kingdom = {\n    name: 'United Kingdom',\n    codes: ['GB', 'GBR', '826'],\n    calcFn: function (vat) {\n        let total = 0;\n        let expect;\n        // Government departments\n        if (vat.substr(0, 2) === 'GD') {\n            expect = 500;\n            return Number(vat.substr(2, 3)) < expect;\n        }\n        // Health authorities\n        if (vat.substr(0, 2) === 'HA') {\n            expect = 499;\n            return Number(vat.substr(2, 3)) > expect;\n        }\n        // Standard and commercial numbers\n        // 0 VAT numbers disallowed!\n        if (Number(vat.slice(0)) === 0)\n            return false;\n        // Check range is OK for modulus 97 calculation\n        const no = Number(vat.slice(0, 7));\n        // Extract the next digit and multiply by the counter.\n        for (let i = 0; i < 7; i++) {\n            if (!this.rules.multipliers)\n                return false;\n            if (!Array.isArray(this.rules.multipliers))\n                return false;\n            total += Number(vat.charAt(i)) * this.rules.multipliers[i];\n        }\n        // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n        // VAT number could use either system, so we check it against both.\n        // Establish check digits by subtracting 97 from total until negative.\n        let checkDigit = total;\n        while (checkDigit > 0) {\n            checkDigit = checkDigit - 97;\n        }\n        // Get the absolute value and compare it with the last two characters of the VAT number. If the\n        // same, then it is a valid traditional check digit. However, even then the number must fit within\n        // certain specified ranges.\n        checkDigit = Math.abs(checkDigit);\n        if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000))\n            return true;\n        // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n        if (checkDigit >= 55)\n            checkDigit = checkDigit - 55;\n        else\n            checkDigit = checkDigit + 42;\n        expect = +vat.slice(7, 9);\n        return !!(checkDigit === expect && no > 1000000);\n    },\n    rules: {\n        multipliers: [8, 7, 6, 5, 4, 3, 2],\n        regex: [\n            /^(GB)?(\\d{9})$/,\n            /^(GB)?(\\d{12})$/,\n            /^(GB)?(GD\\d{3})$/,\n            /^(GB)?(HA\\d{3})$/\n        ]\n    }\n};\n","import { austria } from './countries/austria';\nimport { belgium } from './countries/belgium';\nimport { bulgaria } from './countries/bulgaria';\nimport { croatia } from './countries/croatiat';\nimport { cyprus } from './countries/cyprus';\n// eslint-disable-next-line camelcase\nimport { czech_republic } from './countries/czech_republic';\nimport { denmark } from './countries/denmark';\nimport { estonia } from './countries/estonia';\nimport { europe } from './countries/europe';\nimport { finland } from './countries/finland';\nimport { france } from './countries/france';\nimport { germany } from './countries/germany';\nimport { greece } from './countries/greece';\nimport { hungary } from './countries/hungary';\nimport { ireland } from './countries/ireland';\nimport { italy } from './countries/italy';\nimport { latvia } from './countries/latvia';\nimport { lithuania } from './countries/lithuania';\nimport { luxembourg } from './countries/luxembourg';\nimport { malta } from './countries/malta';\nimport { netherlands } from './countries/netherlands';\nimport { norway } from './countries/norway';\nimport { poland } from './countries/poland';\nimport { portugal } from './countries/portugal';\nimport { romania } from './countries/romania';\nimport { russia } from './countries/russia';\nimport { serbia } from './countries/serbia';\n// eslint-disable-next-line camelcase\nimport { slovakia_republic } from './countries/slovakia_republic';\nimport { slovenia } from './countries/slovenia';\nimport { spain } from './countries/spain';\nimport { sweden } from './countries/sweden';\nimport { switzerland } from './countries/switzerland';\n// eslint-disable-next-line camelcase\nimport { united_kingdom } from './countries/united_kingdom';\nfunction makeResult(vat, isValid, country) {\n    return {\n        value: vat || undefined,\n        isValid: Boolean(isValid),\n        country: (!country) ? undefined : {\n            name: country.name,\n            isoCode: {\n                short: country.codes[0],\n                long: country.codes[1],\n                numeric: country.codes[2]\n            }\n        }\n    };\n}\nfunction removeExtraChars(vat) {\n    vat = vat || '';\n    return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '');\n}\nfunction isValEqToCode(val, codes) {\n    return (val === codes[0] || val === codes[1] || val === codes[2]);\n}\nfunction isInList(country, list) {\n    if (!list)\n        return false;\n    for (let i = 0; i < list.length; i++) {\n        const val = list[i].toUpperCase();\n        if (val === country.name.toUpperCase())\n            return true;\n        if (isValEqToCode(val, country.codes))\n            return true;\n    }\n    return false;\n}\nfunction isBlocked(country, blocked = [], allowed = []) {\n    const isBlocked = isInList(country, blocked);\n    if (isBlocked)\n        return true;\n    const isAllowed = isInList(country, allowed);\n    return allowed.length > 0 && !isAllowed;\n}\nfunction getCountry(vat, countries) {\n    console.info('countries', countries);\n    for (let k in countries) {\n        if (countries.hasOwnProperty(k)) {\n            const regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex);\n            if (regexpValidRes.isValid)\n                return countries[k];\n        }\n    }\n    return null;\n}\nfunction isVatValidToRegexp(vat, regexArr) {\n    for (let i = 0; i < regexArr.length; i++) {\n        const regex = regexArr[i];\n        const isValid = regex.test(vat);\n        if (isValid)\n            return { isValid: true, regex: regex };\n    }\n    return { isValid: false, regex: undefined };\n}\nfunction isVatMathValid(vat, country) {\n    return country.calcFn(vat);\n}\nfunction isVatValid(vat, country) {\n    const regexpValidRes = isVatValidToRegexp(vat, country.rules.regex);\n    if (!regexpValidRes.isValid || !regexpValidRes.regex)\n        return false;\n    const regexResult = regexpValidRes.regex.exec(vat);\n    if (!regexResult)\n        return false;\n    return isVatMathValid(regexResult[2], country);\n}\nexport const blocked = [];\nexport const allowed = [];\nexport const countries = {\n    austria,\n    belgium,\n    bulgaria,\n    croatia,\n    cyprus,\n    czech_republic,\n    denmark,\n    estonia,\n    europe,\n    finland,\n    france,\n    germany,\n    greece,\n    hungary,\n    ireland,\n    italy,\n    latvia,\n    lithuania,\n    luxembourg,\n    malta,\n    netherlands,\n    norway,\n    poland,\n    portugal,\n    romania,\n    russia,\n    serbia,\n    slovakia_republic,\n    slovenia,\n    spain,\n    sweden,\n    switzerland,\n    united_kingdom\n};\nexport function checkVAT(vat, _blocked = [], _allowed = [], _countries = {}) {\n    if (!vat)\n        throw new Error('VAT should be specified');\n    const cleanVAT = removeExtraChars(vat);\n    const result = makeResult(cleanVAT);\n    const country = getCountry(cleanVAT, { ...countries, ..._countries });\n    if (!country)\n        return result;\n    if (isBlocked(country, [...blocked, ..._blocked], [...allowed, ..._allowed]))\n        return makeResult(cleanVAT, false, country);\n    const isValid = isVatValid(cleanVAT, country);\n    if (isValid)\n        return makeResult(cleanVAT, isValid, country);\n    return result;\n}\n"],"sourceRoot":""}