{"version":3,"sources":["webpack://jsvat/webpack/universalModuleDefinition","webpack://jsvat/webpack/bootstrap","webpack://jsvat/./src/countries/austria.js","webpack://jsvat/./src/countries/belgium.js","webpack://jsvat/./src/countries/bulgaria.js","webpack://jsvat/./src/countries/croatia.js","webpack://jsvat/./src/countries/cyprus.js","webpack://jsvat/./src/countries/czech_republic.js","webpack://jsvat/./src/countries/denmark.js","webpack://jsvat/./src/countries/estonia.js","webpack://jsvat/./src/countries/europe.js","webpack://jsvat/./src/countries/finland.js","webpack://jsvat/./src/countries/france.js","webpack://jsvat/./src/countries/germany.js","webpack://jsvat/./src/countries/greece.js","webpack://jsvat/./src/countries/hungary.js","webpack://jsvat/./src/countries/ireland.js","webpack://jsvat/./src/countries/italy.js","webpack://jsvat/./src/countries/latvia.js","webpack://jsvat/./src/countries/lithuania.js","webpack://jsvat/./src/countries/luxembourg.js","webpack://jsvat/./src/countries/malta.js","webpack://jsvat/./src/countries/netherlands.js","webpack://jsvat/./src/countries/norway.js","webpack://jsvat/./src/countries/poland.js","webpack://jsvat/./src/countries/portugal.js","webpack://jsvat/./src/countries/romania.js","webpack://jsvat/./src/countries/russia.js","webpack://jsvat/./src/countries/serbia.js","webpack://jsvat/./src/countries/slovakia_republic.js","webpack://jsvat/./src/countries/slovenia.js","webpack://jsvat/./src/countries/spain.js","webpack://jsvat/./src/countries/sweden.js","webpack://jsvat/./src/countries/switzerland.js","webpack://jsvat/./src/countries/united_kingdom.js","webpack://jsvat/./src/main.js"],"names":["austria","name","codes","calcFn","vat","total","temp","i","charAt","rules","multipliers","Math","floor","slice","regex","belgium","length","check","bulgaria","_increase","value","from","to","incr","_increase2","_checkNineLengthVat","expect","_isPhysicalPerson","test","month","physical","substr","_isForeigner","foreigner","_miscellaneousVAT","miscellaneous","croatia","product","sum","cyprus","String","fromCharCode","czech_republic","_isLegalEntities","additional","_isIndividualType1","_isIndividualType2","j","lookup","_isIndividualType3","denmark","estonia","europe","finland","france","substring","germany","checkDigit","greece","hungary","ireland","typeFormats","first","third","italy","latvia","lithuania","_extractDigit","multiplier","key","_doubleCheckCalculation","extractDigit","_check9DigitVat","extractDigit12","k","med","_doubleCheckCalculation12","l","alt","_check12DigitVat","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","_check10DigitINN","m_1","_check12DigitINN","total1","total2","m_2","m_3","expect2","serbia","slovakia_republic","slovenia","spain","tempnumber","replace","sweden","R","digit","S","switzerland","united_kingdom","no","abs","Result","isValid","country","isoCode","numeric","removeExtraChars","toString","toUpperCase","isValEqToCode","val","isInList","list","isBlocked","blocked","allowed","isAllowed","getCountry","countries","console","info","hasOwnProperty","regexpValidRes","isVatValidToRegexp","regexArr","isVatMathValid","isVatValid","exec","checkVAT","_blocked","_allowed","_countries","Error","cleanVAT","result"],"mappings":"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","file":"jsvat.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsvat\"] = factory();\n\telse\n\t\troot[\"jsvat\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","// @flow\nimport type { Country } from '../main'\n\nexport const austria: Country = {\n  name: 'Austria',\n  codes: ['AT', 'AUT', '040'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var temp\n\n    for (var i = 0; i < 7; i++) {\n      temp = vat.charAt(i) * this.rules.multipliers[i]\n\n      if (temp > 9) {\n        total += Math.floor(temp / 10) + temp % 10\n      } else {\n        total += temp\n      }\n    }\n\n    total = 10 - (total + 4) % 10\n    if (total === 10) total = 0\n\n    return total === +vat.slice(7, 8)\n  },\n  rules: {\n    multipliers: [1, 2, 1, 2, 1, 2, 1],\n    regex: [/^(AT)U(\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const belgium: Country = {\n  name: 'Belgium',\n  codes: ['BE', 'BEL', '056'],\n  calcFn: function (vat: string) {\n    if (vat.length === 9) {\n      vat = '0' + vat\n    }\n\n    if (+vat.slice(1, 2) === 0) return false\n\n    var check = (97 - +vat.slice(0, 8) % 97)\n    return check === +vat.slice(8, 10)\n  },\n  rules: {\n    regex: [/^(BE)(0?\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const bulgaria: Country = {\n  name: 'Bulgaria',\n  codes: ['BG', 'BGR', '100'],\n  calcFn: function (vat: string) {\n    function _increase (value, vat, from, to, incr) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * (i + incr)\n      }\n      return value\n    }\n\n    function _increase2 (value, vat, from, to, multipliers) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * multipliers[i]\n      }\n      return value\n    }\n\n    function _checkNineLengthVat (vat) {\n      var total\n      var temp = 0\n      var expect = +vat.slice(8)\n\n      temp = _increase(temp, vat, 0, 8, 1)\n\n      total = temp % 11\n      if (total !== 10) {\n        return total === expect\n      }\n\n      temp = _increase(0, vat, 0, 8, 3)\n\n      total = temp % 11\n      if (total === 10) total = 0\n\n      return total === expect\n    }\n\n    function _isPhysicalPerson (vat, rules) {\n      // 10 digit VAT code - see if it relates to a standard physical person\n      if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n        // Check month\n        var month = +vat.slice(2, 4)\n        if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n          var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n          // Establish check digit.\n          total = total % 11\n          if (total === 10) total = 0\n          // Check to see if the check digit given is correct, If not, try next type of person\n          if (total === +vat.substr(9, 1)) return true\n        }\n      }\n\n      return false\n    }\n\n    function _isForeigner (vat, rules) {\n      // Extract the next digit and multiply by the counter.\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n      // Check to see if the check digit given is correct, If not, try next type of person\n      if (total % 10 === +vat.substr(9, 1)) {\n        return true\n      }\n    }\n\n    function _miscellaneousVAT (vat, rules) {\n      // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(9, 1)\n      return total === expect\n    }\n\n    if (vat.length === 9) {\n      return _checkNineLengthVat(vat)\n    } else {\n      return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n    }\n  },\n  rules: {\n    multipliers: {\n      physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n      foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n      miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n    },\n    regex: [/^(BG)(\\d{9,10})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const croatia: Country = {\n  name: 'Croatia',\n  codes: ['HR', 'HRV', '191'],\n  calcFn: function (vat: string) {\n    var expect\n\n    // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n    var product = 10\n    var sum = 0\n\n    for (var i = 0; i < 10; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n\n      product = (2 * sum) % 11\n    }\n\n    // Now check that we have the right check digit\n    expect = +vat.slice(10, 11)\n    return (product + expect) % 10 === 1\n  },\n  rules: {\n    regex: [/^(HR)(\\d{11})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const cyprus: Country = {\n  name: 'Cyprus',\n  codes: ['CY', 'CYP', '196'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Not allowed to start with '12'\n    if (+vat.slice(0, 2) === 12) return false\n\n    // Extract the next digit and multiply by the counter.\n\n    for (var i = 0; i < 8; i++) {\n      var temp = +vat.charAt(i)\n      if (i % 2 === 0) {\n        switch (temp) {\n          case 0:\n            temp = 1\n            break\n          case 1:\n            temp = 0\n            break\n          case 2:\n            temp = 5\n            break\n          case 3:\n            temp = 7\n            break\n          case 4:\n            temp = 9\n            break\n          default:\n            temp = temp * 2 + 3\n        }\n      }\n      total += temp\n    }\n\n    // Establish check digit using modulus 26, and translate to char. equivalent.\n    total = total % 26\n    total = String.fromCharCode(total + 65)\n\n    // Check to see if the check digit given is correct\n    expect = vat.substr(8, 1)\n    return total === expect\n  },\n  rules: {\n    regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const czech_republic: Country = {\n  name: 'Czech Republic',\n  codes: ['CZ', 'CZE', '203'],\n  calcFn: function (vat: string) {\n    function _isLegalEntities (vat, rules) {\n      var total = 0\n\n      if (rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * rules.multipliers[i]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(7, 8)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType1 (vat, rules) {\n      if (rules.additional[1].test(vat)) {\n        var temp = +vat.slice(0, 2)\n\n        if (temp > 62) {\n          return false\n        } else {\n          return true\n        }\n      }\n    }\n\n    function _isIndividualType2 (vat, rules) {\n      var total = 0\n\n      if (rules.additional[2].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * rules.multipliers[j]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Convert calculated check digit according to a lookup table\n        var expect = +vat.slice(8, 9)\n        return rules.lookup[total - 1] === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType3 (vat, rules) {\n      if (rules.additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n        var expect = +vat % 11 === 0\n        return !!(temp % 11 === 0 && expect)\n      }\n\n      return false\n    }\n\n    if (_isLegalEntities(vat, this.rules)) return true\n    if (_isIndividualType2(vat, this.rules)) return true\n    if (_isIndividualType3(vat, this.rules)) return true\n    if (_isIndividualType1(vat, this.rules)) return true\n\n    return false\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n    regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n    additional: [\n      /^\\d{8}$/,\n      /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n      /^6\\d{8}$/,\n      /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n    ]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const denmark: Country = {\n  name: 'Denmark',\n  codes: ['DK', 'DNK', '208'],\n  calcFn: function (vat: string) {\n    var total = 0\n\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    return total % 11 === 0\n  },\n  rules: {\n    multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n    regex: [/^(DK)(\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const estonia: Country = {\n  name: 'Estonia',\n  codes: ['EE', 'EST', '233'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits using modulus 10.\n    total = 10 - total % 10\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n    regex: [/^(EE)(10\\d{7})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const europe: Country = {\n  name: 'Europe',\n  codes: ['EU', 'EUR', '000'], // TODO (S.Panfilov) that's not a real codes\n  calcFn: function () {\n    // We know little about EU numbers apart from the fact that the first 3 digits represent the\n    // country, and that there are nine digits in total.\n    return true\n  },\n  rules: {\n    regex: [/^(EU)(\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const finland: Country = {\n  name: 'Finland',\n  codes: ['FI', 'FIN', '246'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n    // Establish check digit.\n    total = 11 - total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [7, 9, 10, 5, 8, 4, 2],\n    regex: [/^(FI)(\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const france: Country = {\n  name: 'France',\n  codes: ['FR', 'FRA', '250'],\n  calcFn: function (vat: string) {\n    var total\n    var expect\n\n    // Checks the check digits of a French VAT number.\n    if (!(/^\\d{11}$/).test(vat)) {\n      return true\n    }\n\n    // Extract the last nine digits as an integer.\n    total = +vat.substring(2)\n\n    // Establish check digit.\n    total = (total * 100 + 12) % 97\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(0, 2)\n    return total === expect\n  },\n  rules: {\n    regex: [\n      /^(FR)(\\d{11})$/,\n      /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n      /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n      /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n    ]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const germany: Country = {\n  name: 'Germany',\n  codes: ['DE', 'DEU', '276'],\n  calcFn: function (vat: string) {\n    // Checks the check digits of a German VAT number.\n    var product = 10\n    var sum = 0\n    var checkDigit = 0\n    var expect\n\n    for (var i = 0; i < 8; i++) {\n      // Extract the next digit and implement peculiar algorithm!.\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n      product = (2 * sum) % 11\n    }\n\n    // Establish check digit.\n    if (11 - product === 10) {\n      checkDigit = 0\n    } else {\n      checkDigit = 11 - product\n    }\n\n    // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n    // check digit.\n    expect = +vat.slice(8, 9)\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(DE)([1-9]\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const greece: Country = {\n  name: 'Greece',\n  codes: ['GR', 'GRC', '300'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // eight character numbers should be prefixed with an 0.\n    if (vat.length === 8) {\n      vat = '0' + vat\n    }\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [\n      256,\n      128,\n      64,\n      32,\n      16,\n      8,\n      4,\n      2\n    ],\n    regex: [/^(EL)(\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const hungary: Country = {\n  name: 'Hungary',\n  codes: ['HU', 'HUN', '348'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = 10 - total % 10\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [\n      9,\n      7,\n      3,\n      1,\n      9,\n      7,\n      3\n    ],\n    regex: [/^(HU)(\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const ireland: Country = {\n  name: 'Ireland',\n  codes: ['IE', 'IRL', '372'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // If the code is type 1 format, we need to convert it to the new before performing the validation.\n    if (this.rules.typeFormats.first.test(vat)) {\n      vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n    }\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // If the number is type 3 then we need to include the trailing A or H in the calculation\n    if (this.rules.typeFormats.third.test(vat)) {\n      // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n      if (vat.charAt(8) === 'H') {\n        total += 72\n      } else {\n        total += 9\n      }\n    }\n\n    // Establish check digit using modulus 23, and translate to char. equivalent.\n    total = total % 23\n    if (total === 0) {\n      total = 'W'\n    } else {\n      total = String.fromCharCode(total + 64)\n    }\n\n    // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n    expect = vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    typeFormats: {\n      first: /^\\d[A-Z*+]/,\n      third: /^\\d{7}[A-Z][AH]$/\n    },\n    regex: [\n      /^(IE)(\\d{7}[A-W])$/,\n      /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n      /^(IE)(\\d{7}[A-W][AH])$/\n    ]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const italy: Country = {\n  name: 'Italy',\n  codes: ['IT', 'ITA', '380'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var temp\n    var expect\n\n    // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n    if (+vat.slice(0, 7) === 0) {\n      return false\n    }\n\n    temp = +vat.slice(7, 10)\n    if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n      return false\n    }\n\n    // Extract the next digit and multiply by the appropriate\n    for (var i = 0; i < 10; i++) {\n      temp = +vat.charAt(i) * this.rules.multipliers[i]\n      if (temp > 9)\n        total += Math.floor(temp / 10) + temp % 10\n      else\n        total += temp\n    }\n\n    // Establish check digit.\n    total = 10 - total % 10\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(10, 11)\n    return total === expect\n  },\n  rules: {\n    multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n    regex: [/^(IT)(\\d{11})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const latvia: Country = {\n  name: 'Latvia',\n  codes: ['LV', 'LVA', '428'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Differentiate between legal entities and natural bodies. For the latter we simply check that\n    // the first six digits correspond to valid DDMMYY dates.\n    if ((/^[0-3]/).test(vat)) {\n      return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n    } else {\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 10; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n      if (total % 11 === 4) {\n        total = 4 - total % 11\n      } else if (total % 11 > 4) {\n        total = 14 - total % 11\n      } else if (total % 11 < 4) {\n        total = 3 - total % 11\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    }\n  },\n  rules: {\n    multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n    regex: [/^(LV)(\\d{11})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const lithuania: Country = {\n  name: 'Lithuania',\n  codes: ['LT', 'LTU', '440'],\n  calcFn: function (vat: string) {\n    function _extractDigit (vat, multiplier, key) {\n      return +vat.charAt(key) * multiplier[key]\n    }\n\n    function _doubleCheckCalculation (vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var i = 0; i < 8; i++) {\n          total += _extractDigit(vat, rules.multipliers.short, i)\n        }\n      }\n\n      return total\n    }\n\n    function extractDigit (vat, total) {\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * (i + 1)\n      }\n      return total\n    }\n\n    function checkDigit (total) {\n      total = total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      return total\n    }\n\n    function _check9DigitVat (vat, rules) {\n      // 9 character VAT numbers are for legal persons\n      var total = 0\n      if (vat.length === 9) {\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit(vat, total)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(8, 9)\n        return total === expect\n      }\n      return false\n    }\n\n    function extractDigit12 (vat, total, rules) {\n      for (var k = 0; k < 11; k++) {\n        total += _extractDigit(vat, rules.multipliers.med, k)\n      }\n      return total\n    }\n\n    function _doubleCheckCalculation12 (vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var l = 0; l < 11; l++) {\n          total += _extractDigit(vat, rules.multipliers.alt, l)\n        }\n      }\n\n      return total\n    }\n\n    function _check12DigitVat (vat, rules) {\n      var total = 0\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      if (vat.length === 12) {\n        // 11th character must be one\n        if (!(rules.check).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit12(vat, total, rules)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation12(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(11, 12)\n        return total === expect\n      }\n\n      return false\n    }\n\n    return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n  },\n  rules: {\n    multipliers: {\n      short: [3, 4, 5, 6, 7, 8, 9, 1],\n      med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n      alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n    },\n    check: /^\\d{10}1/,\n    regex: [/^(LT)(\\d{9}|\\d{12})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const luxembourg: Country = {\n  name: 'Luxembourg',\n  codes: ['LU', 'LUX', '442'],\n  calcFn: function (vat: string) {\n    var expect = +vat.slice(6, 8)\n    var checkDigit = +vat.slice(0, 6) % 89\n    // Checks the check digits of a Luxembourg VAT number.\n\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(LU)(\\d{8})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const malta: Country = {\n  name: 'Malta',\n  codes: ['MT', 'MLT', '470'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 6; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 37.\n    total = 37 - total % 37\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(6, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [3, 4, 6, 7, 8, 9],\n    regex: [/^(MT)([1-9]\\d{7})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const netherlands: Country = {\n  name: 'Netherlands',\n  codes: ['NL', 'NLD', '528'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(NL)(\\d{9})B\\d{2}$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const norway: Country = {\n  name: 'Norway',\n  codes: ['NO', 'NOR', '578'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n    // See http://www.brreg.no/english/coordination/number.html\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n    total = 11 - total % 11\n\n    if (total === 11) {\n      total = 0\n    }\n\n    if (total < 10) {\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    }\n  },\n  rules: {\n    multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n    regex: [/^(NO)(\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const poland: Country = {\n  name: 'Poland',\n  codes: ['PL', 'POL', '616'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 9; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(9, 10)\n    return total === expect\n  },\n  rules: {\n    multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n    regex: [/^(PL)(\\d{10})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const portugal: Country = {\n  name: 'Portugal',\n  codes: ['PT', 'PRT', '620'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = 11 - total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(PT)(\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const romania: Country = {\n  name: 'Romania',\n  codes: ['RO', 'ROU', '642'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    var vatLength = vat.length\n    var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n    for (var i = 0; i < vat.length - 1; i++) {\n      total += +vat.charAt(i) * multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11.\n    total = (10 * total) % 11\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(vat.length - 1, vat.length)\n    return total === expect\n  },\n  rules: {\n    multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n    regex: [/^(RO)([1-9]\\d{1,9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const russia: Country = {\n  name: 'Russian Federation',\n  codes: ['RU', 'RUS', '643'],\n  calcFn: function (vat: string) {\n    function _check10DigitINN (vat, rules) {\n      var total = 0\n\n      if (vat.length === 10) {\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * rules.multipliers.m_1[i]\n        }\n\n        total = total % 11\n        if (total > 9) {\n          total = total % 10\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        var expect = +vat.slice(9, 10)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _check12DigitINN (vat, rules) {\n      var total1 = 0\n      var total2 = 0\n\n      if (vat.length === 12) {\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n        }\n\n        total1 = total1 % 11\n\n        if (total1 > 9) {\n          total1 = total1 % 10\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n        }\n\n        total2 = total2 % 11\n        if (total2 > 9) {\n          total2 = total2 % 10\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        var expect = (total1 === +vat.slice(10, 11))\n        var expect2 = (total2 === +vat.slice(11, 12))\n        return (expect) && (expect2)\n      }\n\n      return false\n    }\n\n    // See http://russianpartner.biz/test_inn.html for algorithm\n    return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n  },\n  rules: {\n    multipliers: {\n      m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n      m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n      m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n    },\n    regex: [/^(RU)(\\d{10}|\\d{12})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const serbia: Country = {\n  name: 'Serbia',\n  codes: ['RS', 'SRB', '688'],\n  calcFn: function (vat: string) {\n    // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n    var product = 10\n    var sum = 0\n    var checkDigit\n\n    for (var i = 0; i < 8; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n      product = (2 * sum) % 11\n    }\n\n    // Now check that we have the right check digit\n    var expect = 1\n    checkDigit = (product + (+vat.slice(8, 9))) % 10\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(RS)(\\d{9})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\n// eslint-disable-next-line camelcase\nexport const slovakia_republic: Country = {\n  name: 'Slovakia_Republic',\n  codes: ['SK', 'SVK', '703'],\n  calcFn: function (vat: string) {\n    var expect = 0\n    var checkDigit = (vat % 11)\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const slovenia: Country = {\n  name: 'Slovenia',\n  codes: ['SI', 'SVN', '705'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits using modulus 11\n    total = 11 - total % 11\n    if (total === 10) {\n      total = 0\n    }\n\n    // Compare the number with the last character of the VAT number. If it is the\n    // same, then it's a valid check digit.\n    expect = +vat.slice(7, 8)\n    return !!(total !== 11 && total === expect)\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(SI)([1-9]\\d{7})$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const spain: Country = {\n  name: 'Spain',\n  codes: ['ES', 'ESP', '724'],\n  calcFn: function (vat: string) {\n    var i = 0\n    var total = 0\n    var temp\n    var expect\n\n    // National juridical entities\n    if (this.rules.additional[0].test(vat)) {\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n      // Now calculate the check digit itself.\n      total = 10 - total % 10\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    } else if (this.rules.additional[1].test(vat)) { // Juridical entities other than national ones\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Now calculate the check digit itself.\n      total = 10 - total % 10\n      total = String.fromCharCode(total + 64)\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(8, 9)\n      return total === expect\n    } else if (this.rules.additional[2].test(vat)) { // Personal number (NIF) (starting with numeric of Y or Z)\n      var tempnumber = vat\n      if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n      if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n      expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n      return tempnumber.charAt(8) === expect\n    } else if (this.rules.additional[3].test(vat)) { // Personal number (NIF) (starting with K, L, M, or X)\n      expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n      return vat.charAt(8) === expect\n    } else return false\n  },\n  rules: {\n    multipliers: [2, 1, 2, 1, 2, 1, 2],\n    regex: [\n      /^(ES)([A-Z]\\d{8})$/,\n      /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n      /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n      /^(ES)([KLMX]\\d{7}[A-Z])$/\n    ],\n    additional: [\n      /^[A-H|J|U|V]\\d{8}$/,\n      /^[A-H|N-S|W]\\d{7}[A-J]$/,\n      /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n      /^[K|L|M|X]\\d{7}[A-Z]$/\n    ]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const sweden: Country = {\n  name: 'Sweden',\n  codes: ['SE', 'SWE', '752'],\n  calcFn: function (vat: string) {\n    var expect\n\n    // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n    var R = 0\n    var digit\n    for (var i = 0; i < 9; i = i + 2) {\n      digit = +vat.charAt(i)\n      R += Math.floor(digit / 5) + ((digit * 2) % 10)\n    }\n\n    // Calculate S where S = C2 + C4 + C6 + C8\n    var S = 0\n    for (var j = 1; j < 9; j = j + 2) {\n      S += +vat.charAt(j)\n    }\n\n    var checkDigit = (10 - (R + S) % 10) % 10\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(9, 10)\n\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(SE)(\\d{10}01)$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\nexport const switzerland: Country = {\n  name: 'Switzerland',\n  codes: ['CH', 'CHE', '756'],\n  calcFn: function (vat: string) {\n    var total = 0\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = 11 - total % 11\n    if (total === 10) return false\n    if (total === 11) total = 0\n\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    var expect = +vat.substr(8, 1)\n    return total === expect\n  },\n  rules: {\n    multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n    regex: [/^(CHE)(\\d{9})(MWST)?$/]\n  }\n}\n","// @flow\nimport type { Country } from '../main'\n\n// eslint-disable-next-line camelcase\nexport const united_kingdom: Country = {\n  name: 'United Kingdom',\n  codes: ['GB', 'GBR', '826'],\n  calcFn: function (vat: string) {\n    var total = 0\n    var expect\n\n    // Government departments\n    if (vat.substr(0, 2) === 'GD') {\n      expect = 500\n      return vat.substr(2, 3) < expect\n    }\n\n    // Health authorities\n    if (vat.substr(0, 2) === 'HA') {\n      expect = 499\n      return vat.substr(2, 3) > expect\n    }\n\n    // Standard and commercial numbers\n\n    // 0 VAT numbers disallowed!\n    if (+vat.slice(0) === 0) return false\n\n    // Check range is OK for modulus 97 calculation\n    var no = +vat.slice(0, 7)\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n    // VAT number could use either system, so we check it against both.\n\n    // Establish check digits by subtracting 97 from total until negative.\n    var checkDigit = total\n    while (checkDigit > 0) {\n      checkDigit = checkDigit - 97\n    }\n\n    // Get the absolute value and compare it with the last two characters of the VAT number. If the\n    // same, then it is a valid traditional check digit. However, even then the number must fit within\n    // certain specified ranges.\n    checkDigit = Math.abs(checkDigit)\n    if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n    // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n    if (checkDigit >= 55)\n      checkDigit = checkDigit - 55\n    else\n      checkDigit = checkDigit + 42\n    expect = +vat.slice(7, 9)\n    return !!(checkDigit === expect && no > 1000000)\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    regex: [\n      /^(GB)?(\\d{9})$/,\n      /^(GB)?(\\d{12})$/,\n      /^(GB)?(GD\\d{3})$/,\n      /^(GB)?(HA\\d{3})$/\n    ]\n  }\n}\n","// @flow\n\nimport { austria } from './countries/austria.js'\nimport { belgium } from './countries/belgium.js'\nimport { bulgaria } from './countries/bulgaria.js'\nimport { croatia } from './countries/croatia.js'\nimport { cyprus } from './countries/cyprus.js'\n// eslint-disable-next-line camelcase\nimport { czech_republic } from './countries/czech_republic.js'\nimport { denmark } from './countries/denmark.js'\nimport { estonia } from './countries/estonia.js'\nimport { europe } from './countries/europe.js'\nimport { finland } from './countries/finland.js'\nimport { france } from './countries/france.js'\nimport { germany } from './countries/germany.js'\nimport { greece } from './countries/greece.js'\nimport { hungary } from './countries/hungary.js'\nimport { ireland } from './countries/ireland.js'\nimport { italy } from './countries/italy.js'\nimport { latvia } from './countries/latvia.js'\nimport { lithuania } from './countries/lithuania.js'\nimport { luxembourg } from './countries/luxembourg.js'\nimport { malta } from './countries/malta.js'\nimport { netherlands } from './countries/netherlands.js'\nimport { norway } from './countries/norway.js'\nimport { poland } from './countries/poland.js'\nimport { portugal } from './countries/portugal.js'\nimport { romania } from './countries/romania.js'\nimport { russia } from './countries/russia.js'\nimport { serbia } from './countries/serbia.js'\n// eslint-disable-next-line camelcase\nimport { slovakia_republic } from './countries/slovakia_republic.js'\nimport { slovenia } from './countries/slovenia.js'\nimport { spain } from './countries/spain.js'\nimport { sweden } from './countries/sweden.js'\nimport { switzerland } from './countries/switzerland.js'\n// eslint-disable-next-line camelcase\nimport { united_kingdom } from './countries/united_kingdom.js'\n\nexport interface Country {\n  name: string;\n  codes: Array<string>;\n  calcFn: (vat: string) => boolean;\n  rules: {\n    multipliers: Array<number>;\n    regex: Array<RegExp>;\n  }\n}\n\nfunction Result (vat: string, isValid: boolean, country: Country) {\n  this.value = vat || null\n  this.isValid = !!isValid\n\n  if (country) {\n    this.country = {\n      name: country.name,\n      isoCode: {\n        short: country.codes[0],\n        long: country.codes[1],\n        numeric: country.codes[2]\n      }\n    }\n  }\n}\n\nfunction removeExtraChars (vat: string) {\n  vat = vat || ''\n  return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n}\n\nfunction isValEqToCode (val, codes) {\n  return (val === codes[0] || val === codes[1] || val === codes[2])\n}\n\nfunction isInList (list, country) {\n  if (!list) return false\n\n  for (let i = 0; i < list.length; i++) {\n    const val = list[i].toUpperCase()\n    if (val === country.name.toUpperCase()) return true\n    if (isValEqToCode(val, country.codes)) return true\n  }\n\n  return false\n}\n\nfunction isBlocked (country: Country, blocked, allowed) {\n  const isBlocked = isInList(blocked, country)\n  if (isBlocked) return true\n  const isAllowed = isInList(allowed, country)\n  return allowed.length > 0 && !isAllowed\n}\n\nfunction getCountry (vat: string, countries: {[string]: Country}) {\n  console.info('countries', countries)\n  for (let k in countries) {\n    if (countries.hasOwnProperty(k)) {\n      var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex)\n      if (regexpValidRes.isValid) return countries[k]\n    }\n  }\n\n  return null\n}\n\nfunction isVatValidToRegexp (vat:string, regexArr: Array<RegExp>) {\n  for (let i = 0; i < regexArr.length; i++) {\n    const regex = regexArr[i]\n    const isValid = regex.test(vat)\n    if (isValid) return { isValid: true, regex: regex }\n  }\n\n  return { isValid: false }\n}\n\nfunction isVatMathValid (vat: string, country: Country) {\n  return country.calcFn(vat)\n}\n\nfunction isVatValid (vat: string, country: Country) {\n  const regexpValidRes = isVatValidToRegexp(vat, country.rules.regex)\n  if (!regexpValidRes.isValid) return false\n  return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country)\n}\n\n// eslint-disable-next-line no-unused-vars\n\nexport const blocked = []\nexport const allowed = []\nexport const countries: { [string]: Country } = {\n  austria,\n  belgium,\n  bulgaria,\n  croatia,\n  cyprus,\n  czech_republic,\n  denmark,\n  estonia,\n  europe,\n  finland,\n  france,\n  germany,\n  greece,\n  hungary,\n  ireland,\n  italy,\n  latvia,\n  lithuania,\n  luxembourg,\n  malta,\n  netherlands,\n  norway,\n  poland,\n  portugal,\n  romania,\n  russia,\n  serbia,\n  slovakia_republic,\n  slovenia,\n  spain,\n  sweden,\n  switzerland,\n  united_kingdom\n}\n\nexport function checkVAT (vat: string, _blocked: Array<string> = [], _allowed: Array<string> = [], _countries: { [string]: Country } = {}): Result {\n  if (!vat) throw new Error('VAT should be specified')\n  const cleanVAT = removeExtraChars(vat)\n  const result = new Result(cleanVAT)\n\n  const country = getCountry(cleanVAT, { ...countries, ..._countries })\n  if (!country) return result\n  if (isBlocked(country, [...blocked, ..._blocked], [...allowed, ..._allowed])) return new Result(cleanVAT, false, country)\n\n  const isValid = isVatValid(cleanVAT, country)\n  if (isValid) return new Result(cleanVAT, isValid, country)\n\n  return result\n}\n"],"sourceRoot":""}