{"version":3,"sources":["webpack://jsvat/webpack/universalModuleDefinition","webpack://jsvat/webpack/bootstrap","webpack://jsvat/./src/countries/austria.js","webpack://jsvat/./src/countries/cyprus.js","webpack://jsvat/./src/countries/ireland.js","webpack://jsvat/./src/countries/italy.js","webpack://jsvat/./src/countries/spain.js","webpack://jsvat/./src/countries/sweden.js","webpack://jsvat/./src/countries/united_kingdom.js","webpack://jsvat/./src/main.js","webpack://jsvat/./src/countries/belgium.js","webpack://jsvat/./src/countries/bulgaria.js","webpack://jsvat/./src/countries/croatia.js","webpack://jsvat/./src/countries/czech_republic.js","webpack://jsvat/./src/countries/denmark.js","webpack://jsvat/./src/countries/estonia.js","webpack://jsvat/./src/countries/europe.js","webpack://jsvat/./src/countries/finland.js","webpack://jsvat/./src/countries/france.js","webpack://jsvat/./src/countries/germany.js","webpack://jsvat/./src/countries/greece.js","webpack://jsvat/./src/countries/hungary.js","webpack://jsvat/./src/countries/latvia.js","webpack://jsvat/./src/countries/lithuania.js","webpack://jsvat/./src/countries/luxembourg.js","webpack://jsvat/./src/countries/malta.js","webpack://jsvat/./src/countries/netherlands.js","webpack://jsvat/./src/countries/norway.js","webpack://jsvat/./src/countries/poland.js","webpack://jsvat/./src/countries/portugal.js","webpack://jsvat/./src/countries/romania.js","webpack://jsvat/./src/countries/russia.js","webpack://jsvat/./src/countries/serbia.js","webpack://jsvat/./src/countries/slovakia_republic.js","webpack://jsvat/./src/countries/slovenia.js","webpack://jsvat/./src/countries/switzerland.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","austria","codes","calcFn","vat","temp","total","charAt","rules","multipliers","Math","floor","slice","regex","cyprus","String","fromCharCode","substr","ireland","typeFormats","first","test","substring","third","italy","spain","expect","additional","tempnumber","replace","sweden","digit","R","S","j","united_kingdom","no","checkDigit","abs","Result","isValid","country","isoCode","short","long","numeric","isValEqToCode","val","isInList","list","length","toUpperCase","isVatValidToRegexp","regexArr","__webpack_exports__","jsvat","blocked","allowed","countries","belgium","bulgaria","_increase","from","to","incr","_increase2","_checkNineLengthVat","month","physical","_isPhysicalPerson","foreigner","_isForeigner","miscellaneous","_miscellaneousVAT","croatia","product","sum","czech_republic","_isLegalEntities","lookup","_isIndividualType2","_isIndividualType3","_isIndividualType1","denmark","estonia","europe","finland","france","germany","greece","hungary","latvia","lithuania","_extractDigit","multiplier","extractDigit","_doubleCheckCalculation","_check9DigitVat","check","alt","_doubleCheckCalculation12","k","med","extractDigit12","_check12DigitVat","luxembourg","malta","netherlands","norway","poland","portugal","romania","vatLength","russia","m_1","_check10DigitINN","total1","total2","m_2","m_3","expect2","_check12DigitINN","serbia","slovakia_republic","slovenia","switzerland","checkVAT","Error","cleanVAT","toString","removeExtraChars","result","getCountry","isAllowed","isBlocked","regexpValidRes","isVatMathValid","exec","isVatValid"],"mappings":"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","file":"jsvat.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsvat\"] = factory();\n\telse\n\t\troot[\"jsvat\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// @flow\n\n// interface CountryConfig {\n//   name: string;\n//   codes: Array<string>;\n//   calcFn: (vat: string) => boolean;\n// }\n\n// export const austria: CountryConfig = {\nexport const austria = {\n  name: 'Austria',\n  codes: ['AT', 'AUT', '040'],\n  calcFn: function (vat) {\n    var total = 0\n    var temp\n\n    for (var i = 0; i < 7; i++) {\n      temp = vat.charAt(i) * this.rules.multipliers[i]\n\n      if (temp > 9) {\n        total += Math.floor(temp / 10) + temp % 10\n      } else {\n        total += temp\n      }\n    }\n\n    total = 10 - (total + 4) % 10\n    if (total === 10) total = 0\n\n    return total === +vat.slice(7, 8)\n  },\n  rules: {\n    multipliers: [1, 2, 1, 2, 1, 2, 1],\n    regex: [/^(AT)U(\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const cyprus = {\n  name: 'Cyprus',\n  codes: ['CY', 'CYP', '196'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Not allowed to start with '12'\n    if (+vat.slice(0, 2) === 12) return false\n\n    // Extract the next digit and multiply by the counter.\n\n    for (var i = 0; i < 8; i++) {\n      var temp = +vat.charAt(i)\n      if (i % 2 === 0) {\n        switch (temp) {\n          case 0:\n            temp = 1\n            break\n          case 1:\n            temp = 0\n            break\n          case 2:\n            temp = 5\n            break\n          case 3:\n            temp = 7\n            break\n          case 4:\n            temp = 9\n            break\n          default:\n            temp = temp * 2 + 3\n        }\n      }\n      total += temp\n    }\n\n    // Establish check digit using modulus 26, and translate to char. equivalent.\n    total = total % 26\n    total = String.fromCharCode(total + 65)\n\n    // Check to see if the check digit given is correct\n    expect = vat.substr(8, 1)\n    return total === expect\n  },\n  rules: {\n    regex: [/^(CY)([0-59]\\d{7}[A-Z])$/]\n  }\n}\n","// @flow\n\nexport const ireland = {\n  name: 'Ireland',\n  codes: ['IE', 'IRL', '372'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // If the code is type 1 format, we need to convert it to the new before performing the validation.\n    if (this.rules.typeFormats.first.test(vat)) {\n      vat = '0' + vat.substring(2, 7) + vat.substring(0, 1) + vat.substring(7, 8)\n    }\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // If the number is type 3 then we need to include the trailing A or H in the calculation\n    if (this.rules.typeFormats.third.test(vat)) {\n      // Add in a multiplier for the character A (1*9=9) or H (8*9=72)\n      if (vat.charAt(8) === 'H') {\n        total += 72\n      } else {\n        total += 9\n      }\n    }\n\n    // Establish check digit using modulus 23, and translate to char. equivalent.\n    total = total % 23\n    if (total === 0) {\n      total = 'W'\n    } else {\n      total = String.fromCharCode(total + 64)\n    }\n\n    // Compare it with the eighth character of the VAT number. If it's the same, then it's valid.\n    expect = vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    typeFormats: {\n      first: /^\\d[A-Z*+]/,\n      third: /^\\d{7}[A-Z][AH]$/\n    },\n    regex: [\n      /^(IE)(\\d{7}[A-W])$/,\n      /^(IE)([7-9][A-Z*+)]\\d{5}[A-W])$/,\n      /^(IE)(\\d{7}[A-W][AH])$/\n    ]\n  }\n}\n","// @flow\n\nexport const italy = {\n  name: 'Italy',\n  codes: ['IT', 'ITA', '380'],\n  calcFn: function (vat) {\n    var total = 0\n    var temp\n    var expect\n\n    // The last three digits are the issuing office, and cannot exceed more 201, unless 999 or 888\n    if (+vat.slice(0, 7) === 0) {\n      return false\n    }\n\n    temp = +vat.slice(7, 10)\n    if ((temp < 1) || (temp > 201) && temp !== 999 && temp !== 888) {\n      return false\n    }\n\n    // Extract the next digit and multiply by the appropriate\n    for (var i = 0; i < 10; i++) {\n      temp = +vat.charAt(i) * this.rules.multipliers[i]\n      if (temp > 9)\n        total += Math.floor(temp / 10) + temp % 10\n      else\n        total += temp\n    }\n\n    // Establish check digit.\n    total = 10 - total % 10\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(10, 11)\n    return total === expect\n  },\n  rules: {\n    multipliers: [1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\n    regex: [/^(IT)(\\d{11})$/]\n  }\n}\n","// @flow\n\nexport const spain = {\n  name: 'Spain',\n  codes: ['ES', 'ESP', '724'],\n  calcFn: function (vat) {\n    var i = 0\n    var total = 0\n    var temp\n    var expect\n\n    // National juridical entities\n    if (this.rules.additional[0].test(vat)) {\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n      // Now calculate the check digit itself.\n      total = 10 - total % 10\n      if (total === 10) {\n        total = 0\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    } else if (this.rules.additional[1].test(vat)) { // Juridical entities other than national ones\n      // Extract the next digit and multiply by the counter.\n      for (i = 0; i < 7; i++) {\n        temp = vat.charAt(i + 1) * this.rules.multipliers[i]\n        if (temp > 9)\n          total += Math.floor(temp / 10) + temp % 10\n        else\n          total += temp\n      }\n\n      // Now calculate the check digit itself.\n      total = 10 - total % 10\n      total = String.fromCharCode(total + 64)\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = vat.slice(8, 9)\n      return total === expect\n    } else if (this.rules.additional[2].test(vat)) { // Personal number (NIF) (starting with numeric of Y or Z)\n      var tempnumber = vat\n      if (tempnumber.substring(0, 1) === 'Y') tempnumber = tempnumber.replace(/Y/, '1')\n      if (tempnumber.substring(0, 1) === 'Z') tempnumber = tempnumber.replace(/Z/, '2')\n      expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+tempnumber.substring(0, 8) % 23)\n      return tempnumber.charAt(8) === expect\n    } else if (this.rules.additional[3].test(vat)) { // Personal number (NIF) (starting with K, L, M, or X)\n      expect = 'TRWAGMYFPDXBNJZSQVHLCKE'.charAt(+vat.substring(1, 8) % 23)\n      return vat.charAt(8) === expect\n    } else return false\n  },\n  rules: {\n    multipliers: [2, 1, 2, 1, 2, 1, 2],\n    regex: [\n      /^(ES)([A-Z]\\d{8})$/,\n      /^(ES)([A-HN-SW]\\d{7}[A-J])$/,\n      /^(ES)([0-9YZ]\\d{7}[A-Z])$/,\n      /^(ES)([KLMX]\\d{7}[A-Z])$/\n    ],\n    additional: [\n      /^[A-H|J|U|V]\\d{8}$/,\n      /^[A-H|N-S|W]\\d{7}[A-J]$/,\n      /^[0-9|Y|Z]\\d{7}[A-Z]$/,\n      /^[K|L|M|X]\\d{7}[A-Z]$/\n    ]\n  }\n}\n","// @flow\n\nexport const sweden = {\n  name: 'Sweden',\n  codes: ['SE', 'SWE', '752'],\n  calcFn: function (vat) {\n    var expect\n\n    // Calculate R where R = R1 + R3 + R5 + R7 + R9, and Ri = INT(Ci/5) + (Ci*2) modulo 10\n    var R = 0\n    var digit\n    for (var i = 0; i < 9; i = i + 2) {\n      digit = +vat.charAt(i)\n      R += Math.floor(digit / 5) + ((digit * 2) % 10)\n    }\n\n    // Calculate S where S = C2 + C4 + C6 + C8\n    var S = 0\n    for (var j = 1; j < 9; j = j + 2) {\n      S += +vat.charAt(j)\n    }\n\n    var checkDigit = (10 - (R + S) % 10) % 10\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(9, 10)\n\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(SE)(\\d{10}01)$/]\n  }\n}\n","// @flow\n\nexport const united_kingdom = {\n  name: 'United Kingdom',\n  codes: ['GB', 'GBR', '826'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Government departments\n    if (vat.substr(0, 2) === 'GD') {\n      expect = 500\n      return vat.substr(2, 3) < expect\n    }\n\n    // Health authorities\n    if (vat.substr(0, 2) === 'HA') {\n      expect = 499\n      return vat.substr(2, 3) > expect\n    }\n\n    // Standard and commercial numbers\n\n    // 0 VAT numbers disallowed!\n    if (+vat.slice(0) === 0) return false\n\n    // Check range is OK for modulus 97 calculation\n    var no = +vat.slice(0, 7)\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Old numbers use a simple 97 modulus, but new numbers use an adaptation of that (less 55). Our\n    // VAT number could use either system, so we check it against both.\n\n    // Establish check digits by subtracting 97 from total until negative.\n    var checkDigit = total\n    while (checkDigit > 0) {\n      checkDigit = checkDigit - 97\n    }\n\n    // Get the absolute value and compare it with the last two characters of the VAT number. If the\n    // same, then it is a valid traditional check digit. However, even then the number must fit within\n    // certain specified ranges.\n    checkDigit = Math.abs(checkDigit)\n    if (checkDigit === +vat.slice(7, 9) && no < 9990001 && (no < 100000 || no > 999999) && (no < 9490001 || no > 9700000)) return true\n\n    // Now try the new method by subtracting 55 from the check digit if we can - else add 42\n    if (checkDigit >= 55)\n      checkDigit = checkDigit - 55\n    else\n      checkDigit = checkDigit + 42\n    expect = +vat.slice(7, 9)\n    return !!(checkDigit === expect && no > 1000000)\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    regex: [\n      /^(GB)?(\\d{9})$/,\n      /^(GB)?(\\d{12})$/,\n      /^(GB)?(GD\\d{3})$/,\n      /^(GB)?(HA\\d{3})$/\n    ]\n  }\n}\n","// @flow\n\nimport {austria} from './countries/austria.js'\nimport {belgium} from './countries/belgium.js'\nimport {bulgaria} from './countries/bulgaria.js'\nimport {croatia} from './countries/croatia.js'\nimport {cyprus} from './countries/cyprus.js'\nimport {czech_republic} from './countries/czech_republic.js'\nimport {denmark} from './countries/denmark.js'\nimport {estonia} from './countries/estonia.js'\nimport {europe} from './countries/europe.js'\nimport {finland} from './countries/finland.js'\nimport {france} from './countries/france.js'\nimport {germany} from './countries/germany.js'\nimport {greece} from './countries/greece.js'\nimport {hungary} from './countries/hungary.js'\nimport {ireland} from './countries/ireland.js'\nimport {italy} from './countries/italy.js'\nimport {latvia} from './countries/latvia.js'\nimport {lithuania} from './countries/lithuania.js'\nimport {luxembourg} from './countries/luxembourg.js'\nimport {malta} from './countries/malta.js'\nimport {netherlands} from './countries/netherlands.js'\nimport {norway} from './countries/norway.js'\nimport {poland} from './countries/poland.js'\nimport {portugal} from './countries/portugal.js'\nimport {romania} from './countries/romania.js'\nimport {russia} from './countries/russia.js'\nimport {serbia} from './countries/serbia.js'\nimport {slovakia_republic} from './countries/slovakia_republic.js'\nimport {slovenia} from './countries/slovenia.js'\nimport {spain} from './countries/spain.js'\nimport {sweden} from './countries/sweden.js'\nimport {switzerland} from './countries/switzerland.js'\nimport {united_kingdom} from './countries/united_kingdom.js'\n\nfunction Result(vat, isValid, country) {\n  this.value = vat || null\n  this.isValid = !!isValid\n\n  if (country) {\n    this.country = {\n      name: country.name,\n      isoCode: {\n        short: country.codes[0],\n        long: country.codes[1],\n        numeric: country.codes[2]\n      }\n    }\n  }\n}\n\nfunction removeExtraChars(vat) {\n  vat = vat || ''\n  return vat.toString().toUpperCase().replace(/(\\s|-|\\.)+/g, '')\n}\n\nfunction isValEqToCode(val, codes) {\n  return (val === codes[0] || val === codes[1] || val === codes[2])\n}\n\nfunction isInList(list, country) {\n  if (!list) return false\n\n  for (let i = 0; i < list.length; i++) {\n    const val = list[i].toUpperCase()\n    if (val === country.name.toUpperCase()) return true\n    if (isValEqToCode(val, country.codes)) return true\n  }\n\n  return false\n}\n\nfunction isBlocked(country, blocked, allowed) {\n  const isBlocked = isInList(blocked, country)\n  if (isBlocked) return true\n  const isAllowed = isInList(allowed, country)\n  return allowed.length > 0 && !isAllowed\n}\n\nfunction getCountry(vat, countries) {\n  for (let k in countries) {\n    if (countries.hasOwnProperty(k)) {\n      var regexpValidRes = isVatValidToRegexp(vat, countries[k].rules.regex)\n      if (regexpValidRes.isValid) return countries[k]\n    }\n  }\n\n  return null\n}\n\nfunction isVatValidToRegexp(vat, regexArr) {\n  for (let i = 0; i < regexArr.length; i++) {\n    const regex = regexArr[i]\n    const isValid = regex.test(vat)\n    if (isValid) return {isValid: true, regex: regex}\n  }\n\n  return {isValid: false}\n}\n\nfunction isVatMathValid(vat, country) {\n  return country.calcFn(vat)\n}\n\nfunction isVatValid(vat, country) {\n  const regexpValidRes = isVatValidToRegexp(vat, country.rules.regex)\n  if (!regexpValidRes.isValid) return false\n  return isVatMathValid(regexpValidRes.regex.exec(vat)[2], country)\n}\n\n// eslint-disable-next-line no-unused-vars\nexport const jsvat = {\n  blocked: [],\n  allowed: [],\n  countries: {\n    austria,\n    belgium,\n    bulgaria,\n    croatia,\n    cyprus,\n    czech_republic,\n    denmark,\n    estonia,\n    europe,\n    finland,\n    france,\n    germany,\n    greece,\n    hungary,\n    ireland,\n    italy,\n    latvia,\n    lithuania,\n    luxembourg,\n    malta,\n    netherlands,\n    norway,\n    poland,\n    portugal,\n    romania,\n    russia,\n    serbia,\n    slovakia_republic,\n    slovenia,\n    spain,\n    sweden,\n    switzerland,\n    united_kingdom\n  },\n  checkVAT: function (vat) {\n    if (!vat) throw new Error('VAT should be specified')\n    const cleanVAT = removeExtraChars(vat)\n    const result = new Result(cleanVAT)\n\n    const country = getCountry(cleanVAT, this.countries)\n    if (!country) return result\n    if (isBlocked(country, this.blocked, this.allowed)) return new Result(cleanVAT, false, country)\n\n    const isValid = isVatValid(cleanVAT, country)\n    if (isValid) return new Result(cleanVAT, isValid, country)\n\n    return result\n  }\n}\n","// @flow\n\nexport const belgium = {\n  name: 'Belgium',\n  codes: ['BE', 'BEL', '056'],\n  calcFn: function (vat) {\n    if (vat.length === 9) {\n      vat = '0' + vat\n    }\n\n    if (+vat.slice(1, 2) === 0) return false\n\n    var check = (97 - +vat.slice(0, 8) % 97)\n    return check === +vat.slice(8, 10)\n  },\n  rules: {\n    regex: [/^(BE)(0?\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const bulgaria = {\n  name: 'Bulgaria',\n  codes: ['BG', 'BGR', '100'],\n  calcFn: function (vat) {\n    function _increase (value, vat, from, to, incr) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * (i + incr)\n      }\n      return value\n    }\n\n    function _increase2 (value, vat, from, to, multipliers) {\n      for (var i = from; i < to; i++) {\n        value += +vat.charAt(i) * multipliers[i]\n      }\n      return value\n    }\n\n    function _checkNineLengthVat (vat) {\n      var total\n      var temp = 0\n      var expect = +vat.slice(8)\n\n      temp = _increase(temp, vat, 0, 8, 1)\n\n      total = temp % 11\n      if (total !== 10) {\n        return total === expect\n      }\n\n      temp = _increase(0, vat, 0, 8, 3)\n\n      total = temp % 11\n      if (total === 10) total = 0\n\n      return total === expect\n    }\n\n    function _isPhysicalPerson (vat, rules) {\n      // 10 digit VAT code - see if it relates to a standard physical person\n      if ((/^\\d\\d[0-5]\\d[0-3]\\d\\d{4}$/).test(vat)) {\n        // Check month\n        var month = +vat.slice(2, 4)\n        if ((month > 0 && month < 13) || (month > 20 && month < 33) || (month > 40 && month < 53)) {\n          var total = _increase2(0, vat, 0, 9, rules.multipliers.physical)\n          // Establish check digit.\n          total = total % 11\n          if (total === 10) total = 0\n          // Check to see if the check digit given is correct, If not, try next type of person\n          if (total === +vat.substr(9, 1)) return true\n        }\n      }\n\n      return false\n    }\n\n    function _isForeigner (vat, rules) {\n      // Extract the next digit and multiply by the counter.\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.foreigner)\n\n      // Check to see if the check digit given is correct, If not, try next type of person\n      if (total % 10 === +vat.substr(9, 1)) {\n        return true\n      }\n    }\n\n    function _miscellaneousVAT (vat, rules) {\n      // Finally, if not yet identified, see if it conforms to a miscellaneous VAT number\n      var total = _increase2(0, vat, 0, 9, rules.multipliers.miscellaneous)\n\n      // Establish check digit.\n      total = 11 - total % 11\n      if (total === 10) return false\n      if (total === 11) total = 0\n\n      // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n      var expect = +vat.substr(9, 1)\n      return total === expect\n    }\n\n    if (vat.length === 9) {\n      return _checkNineLengthVat(vat)\n    } else {\n      return _isPhysicalPerson(vat, this.rules) || _isForeigner(vat, this.rules) || _miscellaneousVAT(vat, this.rules)\n    }\n  },\n  rules: {\n    multipliers: {\n      physical: [2, 4, 8, 5, 10, 9, 7, 3, 6],\n      foreigner: [21, 19, 17, 13, 11, 9, 7, 3, 1],\n      miscellaneous: [4, 3, 2, 7, 6, 5, 4, 3, 2]\n    },\n    regex: [/^(BG)(\\d{9,10})$/]\n  }\n}\n","// @flow\n\nexport const croatia = {\n  name: 'Croatia',\n  codes: ['HR', 'HRV', '191'],\n  calcFn: function (vat) {\n    var expect\n\n    // Checks the check digits of a Croatian VAT number using ISO 7064, MOD 11-10 for check digit.\n    var product = 10\n    var sum = 0\n\n    for (var i = 0; i < 10; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n\n      product = (2 * sum) % 11\n    }\n\n    // Now check that we have the right check digit\n    expect = +vat.slice(10, 11)\n    return (product + expect) % 10 === 1\n  },\n  rules: {\n    regex: [/^(HR)(\\d{11})$/]\n  }\n}\n","// @flow\n\nexport const czech_republic = {\n  name: 'Czech Republic',\n  codes: ['CZ', 'CZE', '203'],\n  calcFn: function (vat) {\n    function _isLegalEntities (vat, rules) {\n      var total = 0\n\n      if (rules.additional[0].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var i = 0; i < 7; i++) {\n          total += +vat.charAt(i) * rules.multipliers[i]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(7, 8)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType1 (vat, rules) {\n      if (rules.additional[1].test(vat)) {\n        var temp = +vat.slice(0, 2)\n\n        if (temp > 62) {\n          return false\n        } else {\n          return true\n        }\n      }\n    }\n\n    function _isIndividualType2 (vat, rules) {\n      var total = 0\n\n      if (rules.additional[2].test(vat)) {\n        // Extract the next digit and multiply by the counter.\n        for (var j = 0; j < 7; j++) {\n          total += +vat.charAt(j + 1) * rules.multipliers[j]\n        }\n\n        // Establish check digit.\n        total = 11 - total % 11\n        if (total === 10) total = 0\n        if (total === 11) total = 1\n\n        // Convert calculated check digit according to a lookup table\n        var expect = +vat.slice(8, 9)\n        return rules.lookup[total - 1] === expect\n      }\n\n      return false\n    }\n\n    function _isIndividualType3 (vat, rules) {\n      if (rules.additional[3].test(vat)) {\n        var temp = +vat.slice(0, 2) + vat.slice(2, 4) + vat.slice(4, 6) + vat.slice(6, 8) + vat.slice(8)\n        var expect = +vat % 11 === 0\n        return !!(temp % 11 === 0 && expect)\n      }\n\n      return false\n    }\n\n    if (_isLegalEntities(vat, this.rules)) return true\n    if (_isIndividualType2(vat, this.rules)) return true\n    if (_isIndividualType3(vat, this.rules)) return true\n    if (_isIndividualType1(vat, this.rules)) return true\n\n    return false\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    lookup: [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10],\n    regex: [/^(CZ)(\\d{8,10})(\\d{3})?$/],\n    additional: [\n      /^\\d{8}$/,\n      /^[0-5][0-9][0|1|5|6]\\d[0-3]\\d\\d{3}$/,\n      /^6\\d{8}$/,\n      /^\\d{2}[0-3|5-8]\\d[0-3]\\d\\d{4}$/\n    ]\n  }\n}\n","// @flow\n\nexport const denmark = {\n  name: 'Denmark',\n  codes: ['DK', 'DNK', '208'],\n  calcFn: function (vat) {\n    var total = 0\n\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    return total % 11 === 0\n  },\n  rules: {\n    multipliers: [2, 7, 6, 5, 4, 3, 2, 1],\n    regex: [/^(DK)(\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const estonia = {\n  name: 'Estonia',\n  codes: ['EE', 'EST', '233'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits using modulus 10.\n    total = 10 - total % 10\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [3, 7, 1, 3, 7, 1, 3, 7],\n    regex: [/^(EE)(10\\d{7})$/]\n  }\n}\n","// @flow\n\nexport const europe = {\n  name: 'Europe',\n  codes: ['EU', 'EUR', '000'], // TODO (S.Panfilov) that's not a real codes\n  calcFn: function () {\n    // We know little about EU numbers apart from the fact that the first 3 digits represent the\n    // country, and that there are nine digits in total.\n    return true\n  },\n  rules: {\n    regex: [/^(EU)(\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const finland = {\n  name: 'Finland',\n  codes: ['FI', 'FIN', '246'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) total += +vat.charAt(i) * this.rules.multipliers[i]\n\n    // Establish check digit.\n    total = 11 - total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [7, 9, 10, 5, 8, 4, 2],\n    regex: [/^(FI)(\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const france = {\n  name: 'France',\n  codes: ['FR', 'FRA', '250'],\n  calcFn: function (vat) {\n    var total\n    var expect\n\n    // Checks the check digits of a French VAT number.\n    if (!(/^\\d{11}$/).test(vat)) {\n      return true\n    }\n\n    // Extract the last nine digits as an integer.\n    total = +vat.substring(2)\n\n    // Establish check digit.\n    total = (total * 100 + 12) % 97\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(0, 2)\n    return total === expect\n  },\n  rules: {\n    regex: [\n      /^(FR)(\\d{11})$/,\n      /^(FR)([A-HJ-NP-Z]\\d{10})$/,\n      /^(FR)(\\d[A-HJ-NP-Z]\\d{9})$/,\n      /^(FR)([A-HJ-NP-Z]{2}\\d{9})$/\n    ]\n  }\n}\n","// @flow\n\nexport const germany = {\n  name: 'Germany',\n  codes: ['DE', 'DEU', '276'],\n  calcFn: function (vat) {\n    // Checks the check digits of a German VAT number.\n    var product = 10\n    var sum = 0\n    var checkDigit = 0\n    var expect\n\n    for (var i = 0; i < 8; i++) {\n      // Extract the next digit and implement peculiar algorithm!.\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n      product = (2 * sum) % 11\n    }\n\n    // Establish check digit.\n    if (11 - product === 10) {\n      checkDigit = 0\n    } else {\n      checkDigit = 11 - product\n    }\n\n    // Compare it with the last two characters of the VAT number. If the same, then it is a valid\n    // check digit.\n    expect = +vat.slice(8, 9)\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(DE)([1-9]\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const greece = {\n  name: 'Greece',\n  codes: ['GR', 'GRC', '300'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // eight character numbers should be prefixed with an 0.\n    if (vat.length === 8) {\n      vat = '0' + vat\n    }\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [\n      256,\n      128,\n      64,\n      32,\n      16,\n      8,\n      4,\n      2\n    ],\n    regex: [/^(EL)(\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const hungary = {\n  name: 'Hungary',\n  codes: ['HU', 'HUN', '348'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = 10 - total % 10\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(7, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [\n      9,\n      7,\n      3,\n      1,\n      9,\n      7,\n      3\n    ],\n    regex: [/^(HU)(\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const latvia = {\n  name: 'Latvia',\n  codes: ['LV', 'LVA', '428'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Differentiate between legal entities and natural bodies. For the latter we simply check that\n    // the first six digits correspond to valid DDMMYY dates.\n    if ((/^[0-3]/).test(vat)) {\n      return !!(/^[0-3][0-9][0-1][0-9]/).test(vat)\n    } else {\n      // Extract the next digit and multiply by the counter.\n      for (var i = 0; i < 10; i++) {\n        total += +vat.charAt(i) * this.rules.multipliers[i]\n      }\n\n      // Establish check digits by getting modulus 11.\n      if (total % 11 === 4 && vat[0] === 9) total = total - 45\n\n      if (total % 11 === 4) {\n        total = 4 - total % 11\n      } else if (total % 11 > 4) {\n        total = 14 - total % 11\n      } else if (total % 11 < 4) {\n        total = 3 - total % 11\n      }\n\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(10, 11)\n      return total === expect\n    }\n  },\n  rules: {\n    multipliers: [9, 1, 4, 8, 3, 10, 2, 5, 7, 6],\n    regex: [/^(LV)(\\d{11})$/]\n  }\n}\n","// @flow\n\nexport const lithuania = {\n  name: 'Lithuania',\n  codes: ['LT', 'LTU', '440'],\n  calcFn: function (vat) {\n    function _extractDigit (vat, multiplier, key) {\n      return +vat.charAt(key) * multiplier[key]\n    }\n\n    function _doubleCheckCalculation (vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var i = 0; i < 8; i++) {\n          total += _extractDigit(vat, rules.multipliers.short, i)\n        }\n      }\n\n      return total\n    }\n\n    function extractDigit (vat, total) {\n      for (var i = 0; i < 8; i++) {\n        total += +vat.charAt(i) * (i + 1)\n      }\n      return total\n    }\n\n    function checkDigit (total) {\n      total = total % 11\n      if (total === 10) {\n        total = 0\n      }\n\n      return total\n    }\n\n    function _check9DigitVat (vat, rules) {\n      // 9 character VAT numbers are for legal persons\n      var total = 0\n      if (vat.length === 9) {\n        // 8th character must be one\n        if (!(/^\\d{7}1/).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit(vat, total)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(8, 9)\n        return total === expect\n      }\n      return false\n    }\n\n    function extractDigit12 (vat, total, rules) {\n      for (var k = 0; k < 11; k++) {\n        total += _extractDigit(vat, rules.multipliers.med, k)\n      }\n      return total\n    }\n\n    function _doubleCheckCalculation12 (vat, total, rules) {\n      if (total % 11 === 10) {\n        total = 0\n        for (var l = 0; l < 11; l++) {\n          total += _extractDigit(vat, rules.multipliers.alt, l)\n        }\n      }\n\n      return total\n    }\n\n    function _check12DigitVat (vat, rules) {\n      var total = 0\n\n      // 12 character VAT numbers are for temporarily registered taxpayers\n      if (vat.length === 12) {\n        // 11th character must be one\n        if (!(rules.check).test(vat)) return false\n\n        // Extract the next digit and multiply by the counter+1.\n        total = extractDigit12(vat, total, rules)\n\n        // Can have a double check digit calculation!\n        total = _doubleCheckCalculation12(vat, total, rules)\n\n        // Establish check digit.\n        total = checkDigit(total)\n\n        // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n        var expect = +vat.slice(11, 12)\n        return total === expect\n      }\n\n      return false\n    }\n\n    return _check9DigitVat(vat, this.rules) || _check12DigitVat(vat, this.rules)\n  },\n  rules: {\n    multipliers: {\n      short: [3, 4, 5, 6, 7, 8, 9, 1],\n      med: [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2],\n      alt: [3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]\n    },\n    check: /^\\d{10}1/,\n    regex: [/^(LT)(\\d{9}|\\d{12})$/]\n  }\n}\n","// @flow\n\nexport const luxembourg = {\n  name: 'Luxembourg',\n  codes: ['LU', 'LUX', '442'],\n  calcFn: function (vat) {\n    var expect = +vat.slice(6, 8)\n    var checkDigit = +vat.slice(0, 6) % 89\n    // Checks the check digits of a Luxembourg VAT number.\n\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(LU)(\\d{8})$/]\n  }\n}\n","// @flow\n\nexport const malta = {\n  name: 'Malta',\n  codes: ['MT', 'MLT', '470'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 6; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 37.\n    total = 37 - total % 37\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(6, 8)\n    return total === expect\n  },\n  rules: {\n    multipliers: [3, 4, 6, 7, 8, 9],\n    regex: [/^(MT)([1-9]\\d{7})$/]\n  }\n}\n","// @flow\n\nexport const netherlands = {\n  name: 'Netherlands',\n  codes: ['NL', 'NLD', '528'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(NL)(\\d{9})B\\d{2}$/]\n  }\n}\n","// @flow\n\nexport const norway = {\n  name: 'Norway',\n  codes: ['NO', 'NOR', '578'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n    // See http://www.brreg.no/english/coordination/number.html\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11. Check digits > 9 are invalid\n    total = 11 - total % 11\n\n    if (total === 11) {\n      total = 0\n    }\n\n    if (total < 10) {\n      // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n      expect = +vat.slice(8, 9)\n      return total === expect\n    }\n  },\n  rules: {\n    multipliers: [3, 2, 7, 6, 5, 4, 3, 2],\n    regex: [/^(NO)(\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const poland = {\n  name: 'Poland',\n  codes: ['PL', 'POL', '616'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 9; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(9, 10)\n    return total === expect\n  },\n  rules: {\n    multipliers: [6, 5, 7, 2, 3, 4, 5, 6, 7],\n    regex: [/^(PL)(\\d{10})$/]\n  }\n}\n","// @flow\n\nexport const portugal = {\n  name: 'Portugal',\n  codes: ['PT', 'PRT', '620'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits subtracting modulus 11 from 11.\n    total = 11 - total % 11\n    if (total > 9) {\n      total = 0\n    }\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(8, 9)\n    return total === expect\n  },\n  rules: {\n    multipliers: [9, 8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(PT)(\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const romania = {\n  name: 'Romania',\n  codes: ['RO', 'ROU', '642'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    var vatLength = vat.length\n    var multipliers = this.rules.multipliers.slice(10 - vatLength)\n\n    for (var i = 0; i < vat.length - 1; i++) {\n      total += +vat.charAt(i) * multipliers[i]\n    }\n\n    // Establish check digits by getting modulus 11.\n    total = (10 * total) % 11\n    if (total === 10) total = 0\n\n    // Compare it with the last character of the VAT number. If it's the same, then it's valid.\n    expect = +vat.slice(vat.length - 1, vat.length)\n    return total === expect\n  },\n  rules: {\n    multipliers: [7, 5, 3, 2, 1, 7, 5, 3, 2],\n    regex: [/^(RO)([1-9]\\d{1,9})$/]\n  }\n}\n","// @flow\n\nexport const russia = {\n  name: 'Russian Federation',\n  codes: ['RU', 'RUS', '643'],\n  calcFn: function (vat) {\n    function _check10DigitINN (vat, rules) {\n      var total = 0\n\n      if (vat.length === 10) {\n        for (var i = 0; i < 10; i++) {\n          total += +vat.charAt(i) * rules.multipliers.m_1[i]\n        }\n\n        total = total % 11\n        if (total > 9) {\n          total = total % 10\n        }\n\n        // Compare it with the last character of the VAT number. If it is the same, then it's valid\n        var expect = +vat.slice(9, 10)\n        return total === expect\n      }\n\n      return false\n    }\n\n    function _check12DigitINN (vat, rules) {\n      var total1 = 0\n      var total2 = 0\n\n      if (vat.length === 12) {\n        for (var j = 0; j < 11; j++) {\n          total1 += +vat.charAt(j) * rules.multipliers.m_2[j]\n        }\n\n        total1 = total1 % 11\n\n        if (total1 > 9) {\n          total1 = total1 % 10\n        }\n\n        for (var k = 0; k < 11; k++) {\n          total2 += +vat.charAt(k) * rules.multipliers.m_3[k]\n        }\n\n        total2 = total2 % 11\n        if (total2 > 9) {\n          total2 = total2 % 10\n        }\n\n        // Compare the first check with the 11th character and the second check with the 12th and last\n        // character of the VAT number. If they're both the same, then it's valid\n        var expect = (total1 === +vat.slice(10, 11))\n        var expect2 = (total2 === +vat.slice(11, 12))\n        return (expect) && (expect2)\n      }\n\n      return false\n    }\n\n    // See http://russianpartner.biz/test_inn.html for algorithm\n    return _check10DigitINN(vat, this.rules) || _check12DigitINN(vat, this.rules)\n  },\n  rules: {\n    multipliers: {\n      m_1: [2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n      m_2: [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n      m_3: [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0]\n    },\n    regex: [/^(RU)(\\d{10}|\\d{12})$/]\n  }\n}\n","// @flow\n\nexport const serbia = {\n  name: 'Serbia',\n  codes: ['RS', 'SRB', '688'],\n  calcFn: function (vat) {\n    // Checks the check digits of a Serbian VAT number using ISO 7064, MOD 11-10 for check digit.\n\n    var product = 10\n    var sum = 0\n    var checkDigit\n\n    for (var i = 0; i < 8; i++) {\n      // Extract the next digit and implement the algorithm\n      sum = (+vat.charAt(i) + product) % 10\n      if (sum === 0) {\n        sum = 10\n      }\n      product = (2 * sum) % 11\n    }\n\n    // Now check that we have the right check digit\n    var expect = 1\n    checkDigit = (product + (+vat.slice(8, 9))) % 10\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(RS)(\\d{9})$/]\n  }\n}\n","// @flow\n\nexport const slovakia_republic = {\n  name: 'Slovakia_Republic',\n  codes: ['SK', 'SVK', '703'],\n  calcFn: function (vat) {\n    var expect = 0\n    var checkDigit = (vat % 11)\n    return checkDigit === expect\n  },\n  rules: {\n    regex: [/^(SK)([1-9]\\d[2346-9]\\d{7})$/]\n  }\n}\n","// @flow\n\nexport const slovenia = {\n  name: 'Slovenia',\n  codes: ['SI', 'SVN', '705'],\n  calcFn: function (vat) {\n    var total = 0\n    var expect\n\n    // Extract the next digit and multiply by the counter.\n    for (var i = 0; i < 7; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digits using modulus 11\n    total = 11 - total % 11\n    if (total === 10) {\n      total = 0\n    }\n\n    // Compare the number with the last character of the VAT number. If it is the\n    // same, then it's a valid check digit.\n    expect = +vat.slice(7, 8)\n    return !!(total !== 11 && total === expect)\n  },\n  rules: {\n    multipliers: [8, 7, 6, 5, 4, 3, 2],\n    regex: [/^(SI)([1-9]\\d{7})$/]\n  }\n}\n","// @flow\n\nexport const switzerland = {\n  name: 'Switzerland',\n  codes: ['CH', 'CHE', '756'],\n  calcFn: function (vat) {\n    var total = 0\n    for (var i = 0; i < 8; i++) {\n      total += +vat.charAt(i) * this.rules.multipliers[i]\n    }\n\n    // Establish check digit.\n    total = 11 - total % 11\n    if (total === 10) return false\n    if (total === 11) total = 0\n\n    // Check to see if the check digit given is correct, If not, we have an error with the VAT number\n    var expect = +vat.substr(8, 1)\n    return total === expect\n  },\n  rules: {\n    multipliers: [5, 4, 3, 2, 7, 6, 5, 4],\n    regex: [/^(CHE)(\\d{9})(MWST)?$/]\n  }\n}\n"],"sourceRoot":""}